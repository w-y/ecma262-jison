(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{a8m4:function(n,e){n.exports='/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n"use strict";\n\nfunction characters(str) {\n    return str.split("");\n};\n\nfunction member(name, array) {\n    return array.indexOf(name) >= 0;\n};\n\nfunction find_if(func, array) {\n    for (var i = 0, n = array.length; i < n; ++i) {\n        if (func(array[i]))\n            return array[i];\n    }\n};\n\nfunction repeat_string(str, i) {\n    if (i <= 0) return "";\n    if (i == 1) return str;\n    var d = repeat_string(str, i >> 1);\n    d += d;\n    if (i & 1) d += str;\n    return d;\n};\n\nfunction configure_error_stack(fn) {\n    Object.defineProperty(fn.prototype, "stack", {\n        get: function() {\n            var err = new Error(this.message);\n            err.name = this.name;\n            try {\n                throw err;\n            } catch(e) {\n                return e.stack;\n            }\n        }\n    });\n}\n\nfunction DefaultsError(msg, defs) {\n    this.message = msg;\n    this.defs = defs;\n};\nDefaultsError.prototype = Object.create(Error.prototype);\nDefaultsError.prototype.constructor = DefaultsError;\nDefaultsError.prototype.name = "DefaultsError";\nconfigure_error_stack(DefaultsError);\n\nDefaultsError.croak = function(msg, defs) {\n    throw new DefaultsError(msg, defs);\n};\n\nfunction defaults(args, defs, croak) {\n    if (args === true)\n        args = {};\n    var ret = args || {};\n    if (croak) for (var i in ret) if (HOP(ret, i) && !HOP(defs, i))\n        DefaultsError.croak("`" + i + "` is not a supported option", defs);\n    for (var i in defs) if (HOP(defs, i)) {\n        ret[i] = (args && HOP(args, i)) ? args[i] : defs[i];\n    }\n    return ret;\n};\n\nfunction merge(obj, ext) {\n    var count = 0;\n    for (var i in ext) if (HOP(ext, i)) {\n        obj[i] = ext[i];\n        count++;\n    }\n    return count;\n};\n\nfunction noop() {}\nfunction return_false() { return false; }\nfunction return_true() { return true; }\nfunction return_this() { return this; }\nfunction return_null() { return null; }\n\nvar MAP = (function(){\n    function MAP(a, f, backwards) {\n        var ret = [], top = [], i;\n        function doit() {\n            var val = f(a[i], i);\n            var is_last = val instanceof Last;\n            if (is_last) val = val.v;\n            if (val instanceof AtTop) {\n                val = val.v;\n                if (val instanceof Splice) {\n                    top.push.apply(top, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    top.push(val);\n                }\n            }\n            else if (val !== skip) {\n                if (val instanceof Splice) {\n                    ret.push.apply(ret, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    ret.push(val);\n                }\n            }\n            return is_last;\n        };\n        if (a instanceof Array) {\n            if (backwards) {\n                for (i = a.length; --i >= 0;) if (doit()) break;\n                ret.reverse();\n                top.reverse();\n            } else {\n                for (i = 0; i < a.length; ++i) if (doit()) break;\n            }\n        }\n        else {\n            for (i in a) if (HOP(a, i)) if (doit()) break;\n        }\n        return top.concat(ret);\n    };\n    MAP.at_top = function(val) { return new AtTop(val) };\n    MAP.splice = function(val) { return new Splice(val) };\n    MAP.last = function(val) { return new Last(val) };\n    var skip = MAP.skip = {};\n    function AtTop(val) { this.v = val };\n    function Splice(val) { this.v = val };\n    function Last(val) { this.v = val };\n    return MAP;\n})();\n\nfunction push_uniq(array, el) {\n    if (array.indexOf(el) < 0)\n        array.push(el);\n};\n\nfunction string_template(text, props) {\n    return text.replace(/\\{(.+?)\\}/g, function(str, p){\n        return props && props[p];\n    });\n};\n\nfunction remove(array, el) {\n    for (var i = array.length; --i >= 0;) {\n        if (array[i] === el) array.splice(i, 1);\n    }\n};\n\nfunction mergeSort(array, cmp) {\n    if (array.length < 2) return array.slice();\n    function merge(a, b) {\n        var r = [], ai = 0, bi = 0, i = 0;\n        while (ai < a.length && bi < b.length) {\n            cmp(a[ai], b[bi]) <= 0\n                ? r[i++] = a[ai++]\n                : r[i++] = b[bi++];\n        }\n        if (ai < a.length) r.push.apply(r, a.slice(ai));\n        if (bi < b.length) r.push.apply(r, b.slice(bi));\n        return r;\n    };\n    function _ms(a) {\n        if (a.length <= 1)\n            return a;\n        var m = Math.floor(a.length / 2), left = a.slice(0, m), right = a.slice(m);\n        left = _ms(left);\n        right = _ms(right);\n        return merge(left, right);\n    };\n    return _ms(array);\n};\n\n// this function is taken from Acorn [1], written by Marijn Haverbeke\n// [1] https://github.com/marijnh/acorn\nfunction makePredicate(words) {\n    if (!(words instanceof Array)) words = words.split(" ");\n    var f = "", cats = [];\n    out: for (var i = 0; i < words.length; ++i) {\n        for (var j = 0; j < cats.length; ++j)\n            if (cats[j][0].length == words[i].length) {\n                cats[j].push(words[i]);\n                continue out;\n            }\n        cats.push([words[i]]);\n    }\n    function quote(word) {\n        return JSON.stringify(word).replace(/[\\u2028\\u2029]/g, function(s) {\n            switch (s) {\n                case "\\u2028": return "\\\\u2028";\n                case "\\u2029": return "\\\\u2029";\n            }\n            return s;\n        });\n    }\n    function compareTo(arr) {\n        if (arr.length == 1) return f += "return str === " + quote(arr[0]) + ";";\n        f += "switch(str){";\n        for (var i = 0; i < arr.length; ++i) f += "case " + quote(arr[i]) + ":";\n        f += "return true}return false;";\n    }\n    // When there are more than three length categories, an outer\n    // switch first dispatches on the lengths, to save on comparisons.\n    if (cats.length > 3) {\n        cats.sort(function(a, b) {return b.length - a.length;});\n        f += "switch(str.length){";\n        for (var i = 0; i < cats.length; ++i) {\n            var cat = cats[i];\n            f += "case " + cat[0].length + ":";\n            compareTo(cat);\n        }\n        f += "}";\n        // Otherwise, simply generate a flat `switch` statement.\n    } else {\n        compareTo(words);\n    }\n    return new Function("str", f);\n};\n\nfunction all(array, predicate) {\n    for (var i = array.length; --i >= 0;)\n        if (!predicate(array[i]))\n            return false;\n    return true;\n};\n\nfunction Dictionary() {\n    this._values = Object.create(null);\n    this._size = 0;\n};\nDictionary.prototype = {\n    set: function(key, val) {\n        if (!this.has(key)) ++this._size;\n        this._values["$" + key] = val;\n        return this;\n    },\n    add: function(key, val) {\n        if (this.has(key)) {\n            this.get(key).push(val);\n        } else {\n            this.set(key, [ val ]);\n        }\n        return this;\n    },\n    get: function(key) { return this._values["$" + key] },\n    del: function(key) {\n        if (this.has(key)) {\n            --this._size;\n            delete this._values["$" + key];\n        }\n        return this;\n    },\n    has: function(key) { return ("$" + key) in this._values },\n    each: function(f) {\n        for (var i in this._values)\n            f(this._values[i], i.substr(1));\n    },\n    size: function() {\n        return this._size;\n    },\n    map: function(f) {\n        var ret = [];\n        for (var i in this._values)\n            ret.push(f(this._values[i], i.substr(1)));\n        return ret;\n    },\n    clone: function() {\n        var ret = new Dictionary();\n        for (var i in this._values)\n            ret._values[i] = this._values[i];\n        ret._size = this._size;\n        return ret;\n    },\n    toObject: function() { return this._values }\n};\nDictionary.fromObject = function(obj) {\n    var dict = new Dictionary();\n    dict._size = merge(dict._values, obj);\n    return dict;\n};\n\nfunction HOP(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n// return true if the node at the top of the stack (that means the\n// innermost node in the current output) is lexically the first in\n// a statement.\nfunction first_in_statement(stack) {\n    var node = stack.parent(-1);\n    for (var i = 0, p; p = stack.parent(i); i++) {\n        if (p instanceof AST_Statement && p.body === node)\n            return true;\n        if ((p instanceof AST_Sequence      && p.expressions[0] === node) ||\n            (p.TYPE == "Call"               && p.expression === node ) ||\n            (p instanceof AST_Dot           && p.expression === node ) ||\n            (p instanceof AST_Sub           && p.expression === node ) ||\n            (p instanceof AST_Conditional   && p.condition === node  ) ||\n            (p instanceof AST_Binary        && p.left === node       ) ||\n            (p instanceof AST_UnaryPostfix  && p.expression === node ))\n        {\n            node = p;\n        } else {\n            return false;\n        }\n    }\n}\n'},kHPw:function(n,e){n.exports='/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n"use strict";\n\nfunction DEFNODE(type, props, methods, base) {\n    if (arguments.length < 4) base = AST_Node;\n    if (!props) props = [];\n    else props = props.split(/\\s+/);\n    var self_props = props;\n    if (base && base.PROPS)\n        props = props.concat(base.PROPS);\n    var code = "return function AST_" + type + "(props){ if (props) { ";\n    for (var i = props.length; --i >= 0;) {\n        code += "this." + props[i] + " = props." + props[i] + ";";\n    }\n    var proto = base && new base;\n    if (proto && proto.initialize || (methods && methods.initialize))\n        code += "this.initialize();";\n    code += "}}";\n    var ctor = new Function(code)();\n    if (proto) {\n        ctor.prototype = proto;\n        ctor.BASE = base;\n    }\n    if (base) base.SUBCLASSES.push(ctor);\n    ctor.prototype.CTOR = ctor;\n    ctor.PROPS = props || null;\n    ctor.SELF_PROPS = self_props;\n    ctor.SUBCLASSES = [];\n    if (type) {\n        ctor.prototype.TYPE = ctor.TYPE = type;\n    }\n    if (methods) for (i in methods) if (HOP(methods, i)) {\n        if (/^\\$/.test(i)) {\n            ctor[i.substr(1)] = methods[i];\n        } else {\n            ctor.prototype[i] = methods[i];\n        }\n    }\n    ctor.DEFMETHOD = function(name, method) {\n        this.prototype[name] = method;\n    };\n    if (typeof exports !== "undefined") {\n        exports["AST_" + type] = ctor;\n    }\n    return ctor;\n};\n\nvar AST_Token = DEFNODE("Token", "type value line col pos endline endcol endpos nlb comments_before comments_after file raw", {\n}, null);\n\nvar AST_Node = DEFNODE("Node", "start end", {\n    _clone: function(deep) {\n        if (deep) {\n            var self = this.clone();\n            return self.transform(new TreeTransformer(function(node) {\n                if (node !== self) {\n                    return node.clone(true);\n                }\n            }));\n        }\n        return new this.CTOR(this);\n    },\n    clone: function(deep) {\n        return this._clone(deep);\n    },\n    $documentation: "Base class of all AST nodes",\n    $propdoc: {\n        start: "[AST_Token] The first token of this node",\n        end: "[AST_Token] The last token of this node"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this);\n    },\n    walk: function(visitor) {\n        return this._walk(visitor); // not sure the indirection will be any help\n    }\n}, null);\n\nAST_Node.warn_function = null;\nAST_Node.warn = function(txt, props) {\n    if (AST_Node.warn_function)\n        AST_Node.warn_function(string_template(txt, props));\n};\n\n/* -----[ statements ]----- */\n\nvar AST_Statement = DEFNODE("Statement", null, {\n    $documentation: "Base class of all statements",\n});\n\nvar AST_Debugger = DEFNODE("Debugger", null, {\n    $documentation: "Represents a debugger statement",\n}, AST_Statement);\n\nvar AST_Directive = DEFNODE("Directive", "value quote", {\n    $documentation: "Represents a directive, like \\"use strict\\";",\n    $propdoc: {\n        value: "[string] The value of this directive as a plain string (it\'s not an AST_String!)",\n        quote: "[string] the original quote character"\n    },\n}, AST_Statement);\n\nvar AST_SimpleStatement = DEFNODE("SimpleStatement", "body", {\n    $documentation: "A statement consisting of an expression, i.e. a = 1 + 2",\n    $propdoc: {\n        body: "[AST_Node] an expression node (should not be instanceof AST_Statement)"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.body._walk(visitor);\n        });\n    }\n}, AST_Statement);\n\nfunction walk_body(node, visitor) {\n    var body = node.body;\n    if (body instanceof AST_Node) {\n        body._walk(visitor);\n    }\n    else for (var i = 0, len = body.length; i < len; i++) {\n        body[i]._walk(visitor);\n    }\n};\n\nvar AST_Block = DEFNODE("Block", "body", {\n    $documentation: "A body of statements (usually bracketed)",\n    $propdoc: {\n        body: "[AST_Statement*] an array of statements"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Statement);\n\nvar AST_BlockStatement = DEFNODE("BlockStatement", null, {\n    $documentation: "A block statement",\n}, AST_Block);\n\nvar AST_EmptyStatement = DEFNODE("EmptyStatement", null, {\n    $documentation: "The empty statement (empty block or simply a semicolon)"\n}, AST_Statement);\n\nvar AST_StatementWithBody = DEFNODE("StatementWithBody", "body", {\n    $documentation: "Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`",\n    $propdoc: {\n        body: "[AST_Statement] the body; this should always be present, even if it\'s an AST_EmptyStatement"\n    }\n}, AST_Statement);\n\nvar AST_LabeledStatement = DEFNODE("LabeledStatement", "label", {\n    $documentation: "Statement with a label",\n    $propdoc: {\n        label: "[AST_Label] a label definition"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.label._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    clone: function(deep) {\n        var node = this._clone(deep);\n        if (deep) {\n            var label = node.label;\n            var def = this.label;\n            node.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_LoopControl\n                    && node.label && node.label.thedef === def) {\n                    node.label.thedef = label;\n                    label.references.push(node);\n                }\n            }));\n        }\n        return node;\n    }\n}, AST_StatementWithBody);\n\nvar AST_IterationStatement = DEFNODE("IterationStatement", null, {\n    $documentation: "Internal class.  All loops inherit from it."\n}, AST_StatementWithBody);\n\nvar AST_DWLoop = DEFNODE("DWLoop", "condition", {\n    $documentation: "Base class for do/while statements",\n    $propdoc: {\n        condition: "[AST_Node] the loop condition.  Should not be instanceof AST_Statement"\n    }\n}, AST_IterationStatement);\n\nvar AST_Do = DEFNODE("Do", null, {\n    $documentation: "A `do` statement",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.body._walk(visitor);\n            this.condition._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_While = DEFNODE("While", null, {\n    $documentation: "A `while` statement",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_For = DEFNODE("For", "init condition step", {\n    $documentation: "A `for` statement",\n    $propdoc: {\n        init: "[AST_Node?] the `for` initialization code, or null if empty",\n        condition: "[AST_Node?] the `for` termination clause, or null if empty",\n        step: "[AST_Node?] the `for` update clause, or null if empty"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            if (this.init) this.init._walk(visitor);\n            if (this.condition) this.condition._walk(visitor);\n            if (this.step) this.step._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_ForIn = DEFNODE("ForIn", "init object", {\n    $documentation: "A `for ... in` statement",\n    $propdoc: {\n        init: "[AST_Node] the `for/in` initialization code",\n        object: "[AST_Node] the object that we\'re looping through"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.init._walk(visitor);\n            this.object._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_ForOf = DEFNODE("ForOf", null, {\n    $documentation: "A `for ... of` statement",\n}, AST_ForIn);\n\nvar AST_With = DEFNODE("With", "expression", {\n    $documentation: "A `with` statement",\n    $propdoc: {\n        expression: "[AST_Node] the `with` expression"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ scope and functions ]----- */\n\nvar AST_Scope = DEFNODE("Scope", "variables functions uses_with uses_eval parent_scope enclosed cname", {\n    $documentation: "Base class for all statements introducing a lexical scope",\n    $propdoc: {\n        variables: "[Object/S] a map of name -> SymbolDef for all variables/functions defined in this scope",\n        functions: "[Object/S] like `variables`, but only lists function declarations",\n        uses_with: "[boolean/S] tells whether this scope uses the `with` statement",\n        uses_eval: "[boolean/S] tells whether this scope contains a direct call to the global `eval`",\n        parent_scope: "[AST_Scope?/S] link to the parent scope",\n        enclosed: "[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes",\n        cname: "[integer/S] current index for mangling variables (used internally by the mangler)",\n    },\n    get_defun_scope: function() {\n        var self = this;\n        while (self.is_block_scope()) {\n            self = self.parent_scope;\n        }\n        return self;\n    },\n    clone: function(deep) {\n        var node = this._clone(deep);\n        if (this.variables) node.variables = this.variables.clone();\n        if (this.functions) node.functions = this.functions.clone();\n        if (this.enclosed) node.enclosed = this.enclosed.slice();\n        return node;\n    }\n}, AST_Block);\n\nvar AST_Toplevel = DEFNODE("Toplevel", "globals", {\n    $documentation: "The toplevel scope",\n    $propdoc: {\n        globals: "[Object/S] a map of name -> SymbolDef for all undeclared names",\n    },\n    wrap_commonjs: function(name) {\n        var body = this.body;\n        var wrapped_tl = "(function(exports){\'$ORIG\';})(typeof " + name + "==\'undefined\'?(" + name + "={}):" + name + ");";\n        wrapped_tl = parse(wrapped_tl);\n        wrapped_tl = wrapped_tl.transform(new TreeTransformer(function before(node){\n            if (node instanceof AST_Directive && node.value == "$ORIG") {\n                return MAP.splice(body);\n            }\n        }));\n        return wrapped_tl;\n    }\n}, AST_Scope);\n\nvar AST_Expansion = DEFNODE("Expansion", "expression", {\n    $documentation: "An expandible argument, such as ...rest, a splat, such as [1,2,...all], or an expansion in a variable declaration, such as var [first, ...rest] = list",\n    $propdoc: {\n        expression: "[AST_Node] the thing to be expanded"\n    },\n    _walk: function(visitor) {\n        var self = this;\n        return visitor._visit(this, function(){\n            self.expression.walk(visitor);\n        });\n    }\n});\n\nvar AST_Lambda = DEFNODE("Lambda", "name argnames uses_arguments is_generator async", {\n    $documentation: "Base class for functions",\n    $propdoc: {\n        name: "[AST_SymbolDeclaration?] the name of this function",\n        argnames: "[AST_SymbolFunarg|AST_Destructuring|AST_Expansion|AST_DefaultAssign*] array of function arguments, destructurings, or expanding arguments",\n        uses_arguments: "[boolean/S] tells whether this function accesses the arguments array",\n        is_generator: "[boolean] is this a generator method",\n        async: "[boolean] is this method async",\n    },\n    args_as_names: function () {\n        var out = [];\n        for (var i = 0; i < this.argnames.length; i++) {\n            if (this.argnames[i] instanceof AST_Destructuring) {\n                out = out.concat(this.argnames[i].all_symbols());\n            } else {\n                out.push(this.argnames[i]);\n            }\n        }\n        return out;\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            if (this.name) this.name._walk(visitor);\n            var argnames = this.argnames;\n            for (var i = 0, len = argnames.length; i < len; i++) {\n                argnames[i]._walk(visitor);\n            }\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Scope);\n\nvar AST_Accessor = DEFNODE("Accessor", null, {\n    $documentation: "A setter/getter function.  The `name` property is always null."\n}, AST_Lambda);\n\nvar AST_Function = DEFNODE("Function", "inlined", {\n    $documentation: "A function expression"\n}, AST_Lambda);\n\nvar AST_Arrow = DEFNODE("Arrow", "inlined", {\n    $documentation: "An ES6 Arrow function ((a) => b)"\n}, AST_Lambda);\n\nvar AST_Defun = DEFNODE("Defun", "inlined", {\n    $documentation: "A function definition"\n}, AST_Lambda);\n\n/* -----[ DESTRUCTURING ]----- */\nvar AST_Destructuring = DEFNODE("Destructuring", "names is_array", {\n    $documentation: "A destructuring of several names. Used in destructuring assignment and with destructuring function argument names",\n    $propdoc: {\n        "names": "[AST_Node*] Array of properties or elements",\n        "is_array": "[Boolean] Whether the destructuring represents an object or array"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.names.forEach(function(name){\n                name._walk(visitor);\n            });\n        });\n    },\n    all_symbols: function() {\n        var out = [];\n        this.walk(new TreeWalker(function (node) {\n            if (node instanceof AST_Symbol) {\n                out.push(node);\n            }\n            if (node instanceof AST_Expansion) {\n                out.push(node.expression);\n            }\n        }));\n        return out;\n    }\n});\n\nvar AST_PrefixedTemplateString = DEFNODE("PrefixedTemplateString", "template_string prefix", {\n    $documentation: "A templatestring with a prefix, such as String.raw`foobarbaz`",\n    $propdoc: {\n        template_string: "[AST_TemplateString] The template string",\n        prefix: "[AST_SymbolRef|AST_PropAccess] The prefix, which can be a symbol such as `foo` or a dotted expression such as `String.raw`."\n    },\n    _walk: function(visitor) {\n        this.prefix._walk(visitor);\n        this.template_string._walk(visitor);\n    }\n})\n\nvar AST_TemplateString = DEFNODE("TemplateString", "segments", {\n    $documentation: "A template string literal",\n    $propdoc: {\n        segments: "[AST_Node*] One or more segments, starting with AST_TemplateSegment. AST_Node may follow AST_TemplateSegment, but each AST_Node must be followed by AST_TemplateSegment."\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.segments.forEach(function(seg){\n                seg._walk(visitor);\n            });\n        });\n    }\n});\n\nvar AST_TemplateSegment = DEFNODE("TemplateSegment", "value raw", {\n    $documentation: "A segment of a template string literal",\n    $propdoc: {\n        value: "Content of the segment",\n        raw: "Raw content of the segment"\n    }\n});\n\n/* -----[ JUMPS ]----- */\n\nvar AST_Jump = DEFNODE("Jump", null, {\n    $documentation: "Base class for “jumps” (for now that\'s `return`, `throw`, `break` and `continue`)"\n}, AST_Statement);\n\nvar AST_Exit = DEFNODE("Exit", "value", {\n    $documentation: "Base class for “exits” (`return` and `throw`)",\n    $propdoc: {\n        value: "[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.value && function(){\n            this.value._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Return = DEFNODE("Return", null, {\n    $documentation: "A `return` statement"\n}, AST_Exit);\n\nvar AST_Throw = DEFNODE("Throw", null, {\n    $documentation: "A `throw` statement"\n}, AST_Exit);\n\nvar AST_LoopControl = DEFNODE("LoopControl", "label", {\n    $documentation: "Base class for loop control statements (`break` and `continue`)",\n    $propdoc: {\n        label: "[AST_LabelRef?] the label, or null if none",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.label && function(){\n            this.label._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Break = DEFNODE("Break", null, {\n    $documentation: "A `break` statement"\n}, AST_LoopControl);\n\nvar AST_Continue = DEFNODE("Continue", null, {\n    $documentation: "A `continue` statement"\n}, AST_LoopControl);\n\n/* -----[ IF ]----- */\n\nvar AST_If = DEFNODE("If", "condition alternative", {\n    $documentation: "A `if` statement",\n    $propdoc: {\n        condition: "[AST_Node] the `if` condition",\n        alternative: "[AST_Statement?] the `else` part, or null if not present"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n            if (this.alternative) this.alternative._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ SWITCH ]----- */\n\nvar AST_Switch = DEFNODE("Switch", "expression", {\n    $documentation: "A `switch` statement",\n    $propdoc: {\n        expression: "[AST_Node] the `switch` “discriminant”"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_SwitchBranch = DEFNODE("SwitchBranch", null, {\n    $documentation: "Base class for `switch` branches",\n}, AST_Block);\n\nvar AST_Default = DEFNODE("Default", null, {\n    $documentation: "A `default` switch branch",\n}, AST_SwitchBranch);\n\nvar AST_Case = DEFNODE("Case", "expression", {\n    $documentation: "A `case` switch branch",\n    $propdoc: {\n        expression: "[AST_Node] the `case` expression"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_SwitchBranch);\n\n/* -----[ EXCEPTIONS ]----- */\n\nvar AST_Try = DEFNODE("Try", "bcatch bfinally", {\n    $documentation: "A `try` statement",\n    $propdoc: {\n        bcatch: "[AST_Catch?] the catch block, or null if not present",\n        bfinally: "[AST_Finally?] the finally block, or null if not present"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            walk_body(this, visitor);\n            if (this.bcatch) this.bcatch._walk(visitor);\n            if (this.bfinally) this.bfinally._walk(visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Catch = DEFNODE("Catch", "argname", {\n    $documentation: "A `catch` node; only makes sense as part of a `try` statement",\n    $propdoc: {\n        argname: "[AST_SymbolCatch|AST_Destructuring|AST_Expansion|AST_DefaultAssign] symbol for the exception"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.argname._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Finally = DEFNODE("Finally", null, {\n    $documentation: "A `finally` node; only makes sense as part of a `try` statement"\n}, AST_Block);\n\n/* -----[ VAR/CONST ]----- */\n\nvar AST_Definitions = DEFNODE("Definitions", "definitions", {\n    $documentation: "Base class for `var` or `const` nodes (variable declarations/initializations)",\n    $propdoc: {\n        definitions: "[AST_VarDef*] array of variable definitions"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            var definitions = this.definitions;\n            for (var i = 0, len = definitions.length; i < len; i++) {\n                definitions[i]._walk(visitor);\n            }\n        });\n    }\n}, AST_Statement);\n\nvar AST_Var = DEFNODE("Var", null, {\n    $documentation: "A `var` statement"\n}, AST_Definitions);\n\nvar AST_Let = DEFNODE("Let", null, {\n    $documentation: "A `let` statement"\n}, AST_Definitions);\n\nvar AST_Const = DEFNODE("Const", null, {\n    $documentation: "A `const` statement"\n}, AST_Definitions);\n\nvar AST_NameMapping = DEFNODE("NameMapping", "foreign_name name", {\n    $documentation: "The part of the export/import statement that declare names from a module.",\n    $propdoc: {\n        foreign_name: "[AST_SymbolExportForeign|AST_SymbolImportForeign] The name being exported/imported (as specified in the module)",\n        name: "[AST_SymbolExport|AST_SymbolImport] The name as it is visible to this module."\n    },\n    _walk: function (visitor) {\n        return visitor._visit(this, function() {\n            this.foreign_name._walk(visitor);\n            this.name._walk(visitor);\n        });\n    }\n})\n\nvar AST_Import = DEFNODE("Import", "imported_name imported_names module_name", {\n    $documentation: "An `import` statement",\n    $propdoc: {\n        imported_name: "[AST_SymbolImport] The name of the variable holding the module\'s default export.",\n        imported_names: "[AST_NameMapping*] The names of non-default imported variables",\n        module_name: "[AST_String] String literal describing where this module came from",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.imported_name) {\n                this.imported_name._walk(visitor);\n            }\n            if (this.imported_names) {\n                this.imported_names.forEach(function(name_import) {\n                    name_import._walk(visitor);\n                });\n            }\n            this.module_name._walk(visitor);\n        });\n    }\n});\n\nvar AST_Export = DEFNODE("Export", "exported_definition exported_value is_default exported_names module_name", {\n    $documentation: "An `export` statement",\n    $propdoc: {\n        exported_definition: "[AST_Defun|AST_Definitions|AST_DefClass?] An exported definition",\n        exported_value: "[AST_Node?] An exported value",\n        exported_names: "[AST_NameMapping*?] List of exported names",\n        module_name: "[AST_String?] Name of the file to load exports from",\n        is_default: "[Boolean] Whether this is the default exported value of this module"\n    },\n    _walk: function (visitor) {\n        visitor._visit(this, function () {\n            if (this.exported_definition) {\n                this.exported_definition._walk(visitor);\n            }\n            if (this.exported_value) {\n                this.exported_value._walk(visitor);\n            }\n            if (this.exported_names) {\n                this.exported_names.forEach(function(name_export) {\n                    name_export._walk(visitor);\n                });\n            }\n            if (this.module_name) {\n                this.module_name._walk(visitor);\n            }\n        });\n    }\n}, AST_Statement);\n\nvar AST_VarDef = DEFNODE("VarDef", "name value", {\n    $documentation: "A variable declaration; only appears in a AST_Definitions node",\n    $propdoc: {\n        name: "[AST_Destructuring|AST_SymbolConst|AST_SymbolLet|AST_SymbolVar] name of the variable",\n        value: "[AST_Node?] initializer, or null of there\'s no initializer"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.name._walk(visitor);\n            if (this.value) this.value._walk(visitor);\n        });\n    }\n});\n\n/* -----[ OTHER ]----- */\n\nvar AST_Call = DEFNODE("Call", "expression args", {\n    $documentation: "A function call expression",\n    $propdoc: {\n        expression: "[AST_Node] expression to invoke as function",\n        args: "[AST_Node*] array of arguments"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            var args = this.args;\n            for (var i = 0, len = args.length; i < len; i++) {\n                args[i]._walk(visitor);\n            }\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_New = DEFNODE("New", null, {\n    $documentation: "An object instantiation.  Derives from a function call since it has exactly the same properties"\n}, AST_Call);\n\nvar AST_Sequence = DEFNODE("Sequence", "expressions", {\n    $documentation: "A sequence expression (comma-separated expressions)",\n    $propdoc: {\n        expressions: "[AST_Node*] array of expressions (at least two)"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expressions.forEach(function(node) {\n                node._walk(visitor);\n            });\n        });\n    }\n});\n\nvar AST_PropAccess = DEFNODE("PropAccess", "expression property", {\n    $documentation: "Base class for property access expressions, i.e. `a.foo` or `a[\\"foo\\"]`",\n    $propdoc: {\n        expression: "[AST_Node] the “container” expression",\n        property: "[AST_Node|string] the property to access.  For AST_Dot this is always a plain string, while for AST_Sub it\'s an arbitrary AST_Node"\n    }\n});\n\nvar AST_Dot = DEFNODE("Dot", null, {\n    $documentation: "A dotted property access expression",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Sub = DEFNODE("Sub", null, {\n    $documentation: "Index-style property access, i.e. `a[\\"foo\\"]`",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            this.property._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Unary = DEFNODE("Unary", "operator expression", {\n    $documentation: "Base class for unary expressions",\n    $propdoc: {\n        operator: "[string] the operator",\n        expression: "[AST_Node] expression that this unary operator applies to"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_UnaryPrefix = DEFNODE("UnaryPrefix", null, {\n    $documentation: "Unary prefix expression, i.e. `typeof i` or `++i`"\n}, AST_Unary);\n\nvar AST_UnaryPostfix = DEFNODE("UnaryPostfix", null, {\n    $documentation: "Unary postfix expression, i.e. `i++`"\n}, AST_Unary);\n\nvar AST_Binary = DEFNODE("Binary", "operator left right", {\n    $documentation: "Binary expression, i.e. `a + b`",\n    $propdoc: {\n        left: "[AST_Node] left-hand side expression",\n        operator: "[string] the operator",\n        right: "[AST_Node] right-hand side expression"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.left._walk(visitor);\n            this.right._walk(visitor);\n        });\n    }\n});\n\nvar AST_Conditional = DEFNODE("Conditional", "condition consequent alternative", {\n    $documentation: "Conditional expression using the ternary operator, i.e. `a ? b : c`",\n    $propdoc: {\n        condition: "[AST_Node]",\n        consequent: "[AST_Node]",\n        alternative: "[AST_Node]"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.condition._walk(visitor);\n            this.consequent._walk(visitor);\n            this.alternative._walk(visitor);\n        });\n    }\n});\n\nvar AST_Assign = DEFNODE("Assign", null, {\n    $documentation: "An assignment expression — `a = b + 5`",\n}, AST_Binary);\n\nvar AST_DefaultAssign = DEFNODE("DefaultAssign", null, {\n    $documentation: "A default assignment expression like in `(a = 3) => a`"\n}, AST_Binary);\n\n/* -----[ LITERALS ]----- */\n\nvar AST_Array = DEFNODE("Array", "elements", {\n    $documentation: "An array literal",\n    $propdoc: {\n        elements: "[AST_Node*] array of elements"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            var elements = this.elements;\n            for (var i = 0, len = elements.length; i < len; i++) {\n                elements[i]._walk(visitor);\n            }\n        });\n    }\n});\n\nvar AST_Object = DEFNODE("Object", "properties", {\n    $documentation: "An object literal",\n    $propdoc: {\n        properties: "[AST_ObjectProperty*] array of properties"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            var properties = this.properties;\n            for (var i = 0, len = properties.length; i < len; i++) {\n                properties[i]._walk(visitor);\n            }\n        });\n    }\n});\n\nvar AST_ObjectProperty = DEFNODE("ObjectProperty", "key value", {\n    $documentation: "Base class for literal object properties",\n    $propdoc: {\n        key: "[string|AST_Node] property name. For ObjectKeyVal this is a string. For getters, setters and computed property this is an AST_Node.",\n        value: "[AST_Node] property value.  For getters and setters this is an AST_Accessor."\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            if (this.key instanceof AST_Node)\n                this.key._walk(visitor);\n            this.value._walk(visitor);\n        });\n    }\n});\n\nvar AST_ObjectKeyVal = DEFNODE("ObjectKeyVal", "quote", {\n    $documentation: "A key: value object property",\n    $propdoc: {\n        quote: "[string] the original quote character"\n    }\n}, AST_ObjectProperty);\n\nvar AST_ObjectSetter = DEFNODE("ObjectSetter", "quote static", {\n    $propdoc: {\n        quote: "[string|undefined] the original quote character, if any",\n        static: "[boolean] whether this is a static setter (classes only)"\n    },\n    $documentation: "An object setter property",\n}, AST_ObjectProperty);\n\nvar AST_ObjectGetter = DEFNODE("ObjectGetter", "quote static", {\n    $propdoc: {\n        quote: "[string|undefined] the original quote character, if any",\n        static: "[boolean] whether this is a static getter (classes only)"\n    },\n    $documentation: "An object getter property",\n}, AST_ObjectProperty);\n\nvar AST_ConciseMethod = DEFNODE("ConciseMethod", "quote static is_generator async", {\n    $propdoc: {\n        quote: "[string|undefined] the original quote character, if any",\n        static: "[boolean] is this method static (classes only)",\n        is_generator: "[boolean] is this a generator method",\n        async: "[boolean] is this method async",\n    },\n    $documentation: "An ES6 concise method inside an object or class"\n}, AST_ObjectProperty);\n\nvar AST_Class = DEFNODE("Class", "name extends properties inlined", {\n    $propdoc: {\n        name: "[AST_SymbolClass|AST_SymbolDefClass?] optional class name.",\n        extends: "[AST_Node]? optional parent class",\n        properties: "[AST_ObjectProperty*] array of properties"\n    },\n    $documentation: "An ES6 class",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            if (this.name) {\n                this.name._walk(visitor);\n            }\n            if (this.extends) {\n                this.extends._walk(visitor);\n            }\n            this.properties.forEach(function(prop){\n                prop._walk(visitor);\n            });\n        });\n    },\n}, AST_Scope);\n\nvar AST_DefClass = DEFNODE("DefClass", null, {\n    $documentation: "A class definition",\n}, AST_Class);\n\nvar AST_ClassExpression = DEFNODE("ClassExpression", null, {\n    $documentation: "A class expression."\n}, AST_Class);\n\nvar AST_Symbol = DEFNODE("Symbol", "scope name thedef", {\n    $propdoc: {\n        name: "[string] name of this symbol",\n        scope: "[AST_Scope/S] the current scope (not necessarily the definition scope)",\n        thedef: "[SymbolDef/S] the definition of this symbol"\n    },\n    $documentation: "Base class for all symbols"\n});\n\nvar AST_NewTarget = DEFNODE("NewTarget", null, {\n    $documentation: "A reference to new.target"\n});\n\nvar AST_SymbolDeclaration = DEFNODE("SymbolDeclaration", "init", {\n    $documentation: "A declaration symbol (symbol in var/const, function name or argument, symbol in catch)",\n}, AST_Symbol);\n\nvar AST_SymbolVar = DEFNODE("SymbolVar", null, {\n    $documentation: "Symbol defining a variable",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolBlockDeclaration = DEFNODE("SymbolBlockDeclaration", null, {\n    $documentation: "Base class for block-scoped declaration symbols"\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolConst = DEFNODE("SymbolConst", null, {\n    $documentation: "A constant declaration"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolLet = DEFNODE("SymbolLet", null, {\n    $documentation: "A block-scoped `let` declaration"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolFunarg = DEFNODE("SymbolFunarg", null, {\n    $documentation: "Symbol naming a function argument",\n}, AST_SymbolVar);\n\nvar AST_SymbolDefun = DEFNODE("SymbolDefun", null, {\n    $documentation: "Symbol defining a function",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolMethod = DEFNODE("SymbolMethod", null, {\n    $documentation: "Symbol in an object defining a method",\n}, AST_Symbol);\n\nvar AST_SymbolLambda = DEFNODE("SymbolLambda", null, {\n    $documentation: "Symbol naming a function expression",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolDefClass = DEFNODE("SymbolDefClass", null, {\n    $documentation: "Symbol naming a class\'s name in a class declaration. Lexically scoped to its containing scope, and accessible within the class."\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolClass = DEFNODE("SymbolClass", null, {\n    $documentation: "Symbol naming a class\'s name. Lexically scoped to the class."\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolCatch = DEFNODE("SymbolCatch", null, {\n    $documentation: "Symbol naming the exception in catch",\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolImport = DEFNODE("SymbolImport", null, {\n    $documentation: "Symbol referring to an imported name",\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolImportForeign = DEFNODE("SymbolImportForeign", null, {\n    $documentation: "A symbol imported from a module, but it is defined in the other module, and its real name is irrelevant for this module\'s purposes",\n}, AST_Symbol);\n\nvar AST_Label = DEFNODE("Label", "references", {\n    $documentation: "Symbol naming a label (declaration)",\n    $propdoc: {\n        references: "[AST_LoopControl*] a list of nodes referring to this label"\n    },\n    initialize: function() {\n        this.references = [];\n        this.thedef = this;\n    }\n}, AST_Symbol);\n\nvar AST_SymbolRef = DEFNODE("SymbolRef", null, {\n    $documentation: "Reference to some symbol (not definition/declaration)",\n}, AST_Symbol);\n\nvar AST_SymbolExport = DEFNODE("SymbolExport", null, {\n    $documentation: "Symbol referring to a name to export",\n}, AST_SymbolRef);\n\nvar AST_SymbolExportForeign = DEFNODE("SymbolExportForeign", null, {\n    $documentation: "A symbol exported from this module, but it is used in the other module, and its real name is irrelevant for this module\'s purposes",\n}, AST_Symbol);\n\nvar AST_LabelRef = DEFNODE("LabelRef", null, {\n    $documentation: "Reference to a label symbol",\n}, AST_Symbol);\n\nvar AST_This = DEFNODE("This", null, {\n    $documentation: "The `this` symbol",\n}, AST_Symbol);\n\nvar AST_Super = DEFNODE("Super", null, {\n    $documentation: "The `super` symbol",\n}, AST_This);\n\nvar AST_Constant = DEFNODE("Constant", null, {\n    $documentation: "Base class for all constants",\n    getValue: function() {\n        return this.value;\n    }\n});\n\nvar AST_String = DEFNODE("String", "value quote", {\n    $documentation: "A string literal",\n    $propdoc: {\n        value: "[string] the contents of this string",\n        quote: "[string] the original quote character"\n    }\n}, AST_Constant);\n\nvar AST_Number = DEFNODE("Number", "value literal", {\n    $documentation: "A number literal",\n    $propdoc: {\n        value: "[number] the numeric value",\n        literal: "[string] numeric value as string (optional)"\n    }\n}, AST_Constant);\n\nvar AST_RegExp = DEFNODE("RegExp", "value", {\n    $documentation: "A regexp literal",\n    $propdoc: {\n        value: "[RegExp] the actual regexp"\n    }\n}, AST_Constant);\n\nvar AST_Atom = DEFNODE("Atom", null, {\n    $documentation: "Base class for atoms",\n}, AST_Constant);\n\nvar AST_Null = DEFNODE("Null", null, {\n    $documentation: "The `null` atom",\n    value: null\n}, AST_Atom);\n\nvar AST_NaN = DEFNODE("NaN", null, {\n    $documentation: "The impossible value",\n    value: 0/0\n}, AST_Atom);\n\nvar AST_Undefined = DEFNODE("Undefined", null, {\n    $documentation: "The `undefined` value",\n    value: (function(){}())\n}, AST_Atom);\n\nvar AST_Hole = DEFNODE("Hole", null, {\n    $documentation: "A hole in an array",\n    value: (function(){}())\n}, AST_Atom);\n\nvar AST_Infinity = DEFNODE("Infinity", null, {\n    $documentation: "The `Infinity` value",\n    value: 1/0\n}, AST_Atom);\n\nvar AST_Boolean = DEFNODE("Boolean", null, {\n    $documentation: "Base class for booleans",\n}, AST_Atom);\n\nvar AST_False = DEFNODE("False", null, {\n    $documentation: "The `false` atom",\n    value: false\n}, AST_Boolean);\n\nvar AST_True = DEFNODE("True", null, {\n    $documentation: "The `true` atom",\n    value: true\n}, AST_Boolean);\n\nvar AST_Await = DEFNODE("Await", "expression", {\n    $documentation: "An `await` statement",\n    $propdoc: {\n        expression: "[AST_Node] the mandatory expression being awaited",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_Yield = DEFNODE("Yield", "expression is_star", {\n    $documentation: "A `yield` statement",\n    $propdoc: {\n        expression: "[AST_Node?] the value returned or thrown by this statement; could be null (representing undefined) but only when is_star is set to false",\n        is_star: "[Boolean] Whether this is a yield or yield* statement"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.expression && function(){\n            this.expression._walk(visitor);\n        });\n    }\n});\n\n/* -----[ TreeWalker ]----- */\n\nfunction TreeWalker(callback) {\n    this.visit = callback;\n    this.stack = [];\n    this.directives = Object.create(null);\n};\nTreeWalker.prototype = {\n    _visit: function(node, descend) {\n        this.push(node);\n        var ret = this.visit(node, descend ? function(){\n            descend.call(node);\n        } : noop);\n        if (!ret && descend) {\n            descend.call(node);\n        }\n        this.pop();\n        return ret;\n    },\n    parent: function(n) {\n        return this.stack[this.stack.length - 2 - (n || 0)];\n    },\n    push: function(node) {\n        if (node instanceof AST_Lambda) {\n            this.directives = Object.create(this.directives);\n        } else if (node instanceof AST_Directive && !this.directives[node.value]) {\n            this.directives[node.value] = node;\n        } else if (node instanceof AST_Class) {\n            this.directives = Object.create(this.directives);\n            if (!this.directives["use strict"]) {\n                this.directives["use strict"] = node;\n            }\n        }\n        this.stack.push(node);\n    },\n    pop: function() {\n        var node = this.stack.pop();\n        if (node instanceof AST_Lambda || node instanceof AST_Class) {\n            this.directives = Object.getPrototypeOf(this.directives);\n        }\n    },\n    self: function() {\n        return this.stack[this.stack.length - 1];\n    },\n    find_parent: function(type) {\n        var stack = this.stack;\n        for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof type) return x;\n        }\n    },\n    has_directive: function(type) {\n        var dir = this.directives[type];\n        if (dir) return dir;\n        var node = this.stack[this.stack.length - 1];\n        if (node instanceof AST_Scope && node.body) {\n            for (var i = 0; i < node.body.length; ++i) {\n                var st = node.body[i];\n                if (!(st instanceof AST_Directive)) break;\n                if (st.value == type) return st;\n            }\n        }\n    },\n    loopcontrol_target: function(node) {\n        var stack = this.stack;\n        if (node.label) for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_LabeledStatement && x.label.name == node.label.name)\n                return x.body;\n        } else for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_IterationStatement\n                || node instanceof AST_Break && x instanceof AST_Switch)\n                return x;\n        }\n    }\n};\n'},mIvO:function(n,e){n.exports='/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n    Parser based on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n"use strict";\n\nvar KEYWORDS = \'break case catch class const continue debugger default delete do else export extends finally for function if in instanceof let new return switch throw try typeof var void while with\';\nvar KEYWORDS_ATOM = \'false null true\';\nvar RESERVED_WORDS = \'enum implements import interface package private protected public static super this \' + KEYWORDS_ATOM + " " + KEYWORDS;\nvar KEYWORDS_BEFORE_EXPRESSION = \'return new delete throw else case yield await\';\n\nKEYWORDS = makePredicate(KEYWORDS);\nRESERVED_WORDS = makePredicate(RESERVED_WORDS);\nKEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);\nKEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);\n\nvar OPERATOR_CHARS = makePredicate(characters("+-*&%=<>!?|~^"));\n\nvar RE_NUM_LITERAL = /[0-9a-f]/i;\nvar RE_HEX_NUMBER = /^0x[0-9a-f]+$/i;\nvar RE_OCT_NUMBER = /^0[0-7]+$/;\nvar RE_ES6_OCT_NUMBER = /^0o[0-7]+$/i;\nvar RE_BIN_NUMBER = /^0b[01]+$/i;\nvar RE_DEC_NUMBER = /^\\d*\\.?\\d*(?:e[+-]?\\d*(?:\\d\\.?|\\.?\\d)\\d*)?$/i;\n\nvar OPERATORS = makePredicate([\n    "in",\n    "instanceof",\n    "typeof",\n    "new",\n    "void",\n    "delete",\n    "++",\n    "--",\n    "+",\n    "-",\n    "!",\n    "~",\n    "&",\n    "|",\n    "^",\n    "*",\n    "**",\n    "/",\n    "%",\n    ">>",\n    "<<",\n    ">>>",\n    "<",\n    ">",\n    "<=",\n    ">=",\n    "==",\n    "===",\n    "!=",\n    "!==",\n    "?",\n    "=",\n    "+=",\n    "-=",\n    "/=",\n    "*=",\n    "**=",\n    "%=",\n    ">>=",\n    "<<=",\n    ">>>=",\n    "|=",\n    "^=",\n    "&=",\n    "&&",\n    "||"\n]);\n\nvar WHITESPACE_CHARS = makePredicate(characters(" \\u00a0\\n\\r\\t\\f\\u000b\\u200b\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\uFEFF"));\n\nvar NEWLINE_CHARS = makePredicate(characters("\\n\\r\\u2028\\u2029"));\n\nvar PUNC_AFTER_EXPRESSION = makePredicate(characters(";]),:"));\n\nvar PUNC_BEFORE_EXPRESSION = makePredicate(characters("[{(,;:"));\n\nvar PUNC_CHARS = makePredicate(characters("[]{}(),;:"));\n\n/* -----[ Tokenizer ]----- */\n\n// surrogate safe regexps adapted from https://github.com/mathiasbynens/unicode-8.0.0/tree/89b412d8a71ecca9ed593d9e9fa073ab64acfebe/Binary_Property\nvar UNICODE = {\n    ID_Start: /[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n    ID_Continue: /[0-9A-Z_a-z\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/,\n};\n\nfunction get_full_char(str, pos) {\n    var char = str.charAt(pos);\n    if (is_surrogate_pair_head(char)) {\n        var next = str.charAt(pos + 1);\n        if (is_surrogate_pair_tail(next)) {\n            return char + next;\n        }\n    }\n    if (is_surrogate_pair_tail(char)) {\n        var prev = str.charAt(pos - 1);\n        if (is_surrogate_pair_head(prev)) {\n            return prev + char;\n        }\n    }\n    return char;\n}\n\nfunction get_full_char_code(str, pos) {\n    // https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\n    if (is_surrogate_pair_head(str.charAt(pos))) {\n        return 0x10000 + (str.charCodeAt(pos) - 0xd800 << 10) + str.charCodeAt(pos + 1) - 0xdc00;\n    }\n    return str.charCodeAt(pos);\n}\n\nfunction get_full_char_length(str) {\n    var surrogates = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        if (is_surrogate_pair_head(str.charCodeAt(i))) {\n            if (is_surrogate_pair_tail(str.charCodeAt(i + 1))) {\n                surrogates++;\n                i++;\n            }\n        }\n    }\n\n    return str.length - surrogates;\n}\n\nfunction from_char_code(code) {\n    // Based on https://github.com/mathiasbynens/String.fromCodePoint/blob/master/fromcodepoint.js\n    if (code > 0xFFFF) {\n        code -= 0x10000;\n        return (String.fromCharCode((code >> 10) + 0xD800) +\n            String.fromCharCode((code % 0x400) + 0xDC00));\n    }\n    return String.fromCharCode(code);\n}\n\nfunction is_surrogate_pair_head(code) {\n    if (typeof code === "string")\n        code = code.charCodeAt(0);\n\n    return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction is_surrogate_pair_tail(code) {\n    if (typeof code === "string")\n        code = code.charCodeAt(0);\n    return code >= 0xdc00 && code <= 0xdfff;\n}\n\nfunction is_digit(code) {\n    return code >= 48 && code <= 57;\n};\n\nfunction is_identifier(name) {\n    if (typeof name !== "string" || RESERVED_WORDS(name))\n        return false;\n\n    return true;\n};\n\nfunction is_identifier_start(ch) {\n    var code = ch.charCodeAt(0);\n    return UNICODE.ID_Start.test(ch) || code == 36 || code == 95;\n};\n\nfunction is_identifier_char(ch) {\n    var code = ch.charCodeAt(0);\n    return UNICODE.ID_Continue.test(ch)\n        || code == 36\n        || code == 95\n        || code == 8204 // \\u200c: zero-width non-joiner <ZWNJ>\n        || code == 8205 // \\u200d: zero-width joiner <ZWJ> (in my ECMA-262 PDF, this is also 200c)\n    ;\n};\n\nfunction is_identifier_string(str){\n    return /^[a-z_$][a-z0-9_$]*$/i.test(str);\n};\n\nfunction parse_js_number(num) {\n    if (RE_HEX_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 16);\n    } else if (RE_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(1), 8);\n    } else if (RE_ES6_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 8);\n    } else if (RE_BIN_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 2);\n    } else if (RE_DEC_NUMBER.test(num)) {\n        return parseFloat(num);\n    } else {\n        var val = parseFloat(num);\n        if (val == num) return val;\n    }\n};\n\nfunction JS_Parse_Error(message, filename, line, col, pos) {\n    this.message = message;\n    this.filename = filename;\n    this.line = line;\n    this.col = col;\n    this.pos = pos;\n};\nJS_Parse_Error.prototype = Object.create(Error.prototype);\nJS_Parse_Error.prototype.constructor = JS_Parse_Error;\nJS_Parse_Error.prototype.name = "SyntaxError";\nconfigure_error_stack(JS_Parse_Error);\n\nfunction js_error(message, filename, line, col, pos) {\n    throw new JS_Parse_Error(message, filename, line, col, pos);\n};\n\nfunction is_token(token, type, val) {\n    return token.type == type && (val == null || token.value == val);\n};\n\nvar EX_EOF = {};\n\nfunction tokenizer($TEXT, filename, html5_comments, shebang) {\n\n    var S = {\n        text            : $TEXT,\n        filename        : filename,\n        pos             : 0,\n        tokpos          : 0,\n        line            : 1,\n        tokline         : 0,\n        col             : 0,\n        tokcol          : 0,\n        newline_before  : false,\n        regex_allowed   : false,\n        brace_counter   : 0,\n        template_braces : [],\n        comments_before : [],\n        directives      : {},\n        directive_stack : []\n    };\n\n    function peek() { return get_full_char(S.text, S.pos); };\n\n    function next(signal_eof, in_string) {\n        var ch = get_full_char(S.text, S.pos++);\n        if (signal_eof && !ch)\n            throw EX_EOF;\n        if (NEWLINE_CHARS(ch)) {\n            S.newline_before = S.newline_before || !in_string;\n            ++S.line;\n            S.col = 0;\n            if (!in_string && ch == "\\r" && peek() == "\\n") {\n                // treat a \\r\\n sequence as a single \\n\n                ++S.pos;\n                ch = "\\n";\n            }\n        } else {\n            if (ch.length > 1) {\n                ++S.pos;\n                ++S.col;\n            }\n            ++S.col;\n        }\n        return ch;\n    };\n\n    function forward(i) {\n        while (i-- > 0) next();\n    };\n\n    function looking_at(str) {\n        return S.text.substr(S.pos, str.length) == str;\n    };\n\n    function find_eol() {\n        var text = S.text;\n        for (var i = S.pos, n = S.text.length; i < n; ++i) {\n            var ch = text[i];\n            if (NEWLINE_CHARS(ch))\n                return i;\n        }\n        return -1;\n    };\n\n    function find(what, signal_eof) {\n        var pos = S.text.indexOf(what, S.pos);\n        if (signal_eof && pos == -1) throw EX_EOF;\n        return pos;\n    };\n\n    function start_token() {\n        S.tokline = S.line;\n        S.tokcol = S.col;\n        S.tokpos = S.pos;\n    };\n\n    var prev_was_dot = false;\n    function token(type, value, is_comment) {\n        S.regex_allowed = ((type == "operator" && !UNARY_POSTFIX(value)) ||\n                           (type == "keyword" && KEYWORDS_BEFORE_EXPRESSION(value)) ||\n                           (type == "punc" && PUNC_BEFORE_EXPRESSION(value))) ||\n                           (type == "arrow");\n        if (type == "punc" && value == ".") {\n            prev_was_dot = true;\n        } else if (!is_comment) {\n            prev_was_dot = false;\n        }\n        var ret = {\n            type    : type,\n            value   : value,\n            line    : S.tokline,\n            col     : S.tokcol,\n            pos     : S.tokpos,\n            endline : S.line,\n            endcol  : S.col,\n            endpos  : S.pos,\n            nlb     : S.newline_before,\n            file    : filename\n        };\n        if (/^(?:num|string|regexp)$/i.test(type)) {\n            ret.raw = $TEXT.substring(ret.pos, ret.endpos);\n        }\n        if (!is_comment) {\n            ret.comments_before = S.comments_before;\n            ret.comments_after = S.comments_before = [];\n        }\n        S.newline_before = false;\n        return new AST_Token(ret);\n    };\n\n    function skip_whitespace() {\n        while (WHITESPACE_CHARS(peek()))\n            next();\n    };\n\n    function read_while(pred) {\n        var ret = "", ch, i = 0;\n        while ((ch = peek()) && pred(ch, i++))\n            ret += next();\n        return ret;\n    };\n\n    function parse_error(err) {\n        js_error(err, filename, S.tokline, S.tokcol, S.tokpos);\n    };\n\n    function read_num(prefix) {\n        var has_e = false, after_e = false, has_x = false, has_dot = prefix == ".";\n        var num = read_while(function(ch, i){\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 98: case 66: // bB\n                return (has_x = true); // Can occur in hex sequence, don\'t return false yet\n              case 111: case 79: // oO\n              case 120: case 88: // xX\n                return has_x ? false : (has_x = true);\n              case 101: case 69: // eE\n                return has_x ? true : has_e ? false : (has_e = after_e = true);\n              case 45: // -\n                return after_e || (i == 0 && !prefix);\n              case 43: // +\n                return after_e;\n              case (after_e = false, 46): // .\n                return (!has_dot && !has_x && !has_e) ? (has_dot = true) : false;\n            }\n            return RE_NUM_LITERAL.test(ch);\n        });\n        if (prefix) num = prefix + num;\n        if (RE_OCT_NUMBER.test(num) && next_token.has_directive("use strict")) {\n            parse_error("Legacy octal literals are not allowed in strict mode");\n        }\n        var valid = parse_js_number(num);\n        if (!isNaN(valid)) {\n            return token("num", valid);\n        } else {\n            parse_error("Invalid syntax: " + num);\n        }\n    };\n\n    function read_escaped_char(in_string) {\n        var ch = next(true, in_string);\n        switch (ch.charCodeAt(0)) {\n          case 110 : return "\\n";\n          case 114 : return "\\r";\n          case 116 : return "\\t";\n          case 98  : return "\\b";\n          case 118 : return "\\u000b"; // \\v\n          case 102 : return "\\f";\n          case 120 : return String.fromCharCode(hex_bytes(2)); // \\x\n          case 117 : // \\u\n            if (peek() == "{") {\n                next(true);\n                if (peek() === "}")\n                    parse_error("Expecting hex-character between {}");\n                while (peek() == "0") next(true); // No significance\n                var result, length = find("}", true) - S.pos;\n                // Avoid 32 bit integer overflow (1 << 32 === 1)\n                // We know first character isn\'t 0 and thus out of range anyway\n                if (length > 6 || (result = hex_bytes(length)) > 0x10FFFF) {\n                    parse_error("Unicode reference out of bounce");\n                }\n                next(true);\n                return from_char_code(result);\n            }\n            return String.fromCharCode(hex_bytes(4));\n          case 10  : return ""; // newline\n          case 13  :            // \\r\n            if (peek() == "\\n") { // DOS newline\n                next(true, in_string);\n                return "";\n            }\n        }\n        if (ch >= "0" && ch <= "7")\n            return read_octal_escape_sequence(ch);\n        return ch;\n    };\n\n    function read_octal_escape_sequence(ch) {\n        // Read\n        var p = peek();\n        if (p >= "0" && p <= "7") {\n            ch += next(true);\n            if (ch[0] <= "3" && (p = peek()) >= "0" && p <= "7")\n                ch += next(true);\n        }\n\n        // Parse\n        if (ch === "0") return "\\0";\n        if (ch.length > 0 && next_token.has_directive("use strict"))\n            parse_error("Legacy octal escape sequences are not allowed in strict mode");\n        return String.fromCharCode(parseInt(ch, 8));\n    }\n\n    function hex_bytes(n) {\n        var num = 0;\n        for (; n > 0; --n) {\n            var digit = parseInt(next(true), 16);\n            if (isNaN(digit))\n                parse_error("Invalid hex-character pattern in string");\n            num = (num << 4) | digit;\n        }\n        return num;\n    };\n\n    var read_string = with_eof_error("Unterminated string constant", function(quote_char){\n        var quote = next(), ret = "";\n        for (;;) {\n            var ch = next(true, true);\n            if (ch == "\\\\") ch = read_escaped_char(true);\n            else if (NEWLINE_CHARS(ch)) parse_error("Unterminated string constant");\n            else if (ch == quote) break;\n            ret += ch;\n        }\n        var tok = token("string", ret);\n        tok.quote = quote_char;\n        return tok;\n    });\n\n    var read_template_characters = with_eof_error("Unterminated template", function(begin){\n        if (begin) {\n            S.template_braces.push(S.brace_counter);\n        }\n        var content = "", raw = "", ch, tok;\n        next(true, true);\n        while ((ch = next(true, true)) != "`") {\n            if (ch == "\\r") {\n                if (peek() == "\\n") ++S.pos;\n                ch = "\\n";\n            } else if (ch == "$" && peek() == "{") {\n                next(true, true);\n                S.brace_counter++;\n                tok = token(begin ? "template_head" : "template_substitution", content);\n                tok.begin = begin;\n                tok.raw = raw;\n                tok.end = false;\n                return tok;\n            }\n\n            raw += ch;\n            if (ch == "\\\\") {\n                var tmp = S.pos;\n                ch = read_escaped_char();\n                raw += S.text.substr(tmp, S.pos - tmp);\n            }\n\n            content += ch;\n        }\n        S.template_braces.pop();\n        tok = token(begin ? "template_head" : "template_substitution", content);\n        tok.begin = begin;\n        tok.raw = raw;\n        tok.end = true;\n        return tok;\n    });\n\n    function skip_line_comment(type) {\n        var regex_allowed = S.regex_allowed;\n        var i = find_eol(), ret;\n        if (i == -1) {\n            ret = S.text.substr(S.pos);\n            S.pos = S.text.length;\n        } else {\n            ret = S.text.substring(S.pos, i);\n            S.pos = i;\n        }\n        S.col = S.tokcol + (S.pos - S.tokpos);\n        S.comments_before.push(token(type, ret, true));\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    };\n\n    var skip_multiline_comment = with_eof_error("Unterminated multiline comment", function(){\n        var regex_allowed = S.regex_allowed;\n        var i = find("*/", true);\n        var text = S.text.substring(S.pos, i).replace(/\\r\\n|\\r|\\u2028|\\u2029/g, \'\\n\');\n        // update stream position\n        forward(get_full_char_length(text) /* text length doesn\'t count \\r\\n as 2 char while S.pos - i does */ + 2);\n        S.comments_before.push(token("comment2", text, true));\n        S.newline_before = S.newline_before || text.indexOf("\\n") >= 0;\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    });\n\n    var read_name = with_eof_error("Unterminated identifier name", function() {\n        var name = "", ch, escaped = false, hex;\n        var read_escaped_identifier_char = function() {\n            escaped = true;\n            next();\n            if (peek() !== "u") {\n                parse_error("Expecting UnicodeEscapeSequence -- uXXXX or u{XXXX}");\n            }\n            return read_escaped_char();\n        }\n\n        // Read first character (ID_Start)\n        if ((name = peek()) === "\\\\") {\n            name = read_escaped_identifier_char();\n            if (!is_identifier_start(name)) {\n                parse_error("First identifier char is an invalid identifier char");\n            }\n        } else if (is_identifier_start(name)){\n            next();\n        } else {\n            return "";\n        }\n\n        // Read ID_Continue\n        while ((ch = peek()) != null) {\n            if ((ch = peek()) === "\\\\") {\n                ch = read_escaped_identifier_char();\n                if (!is_identifier_char(ch)) {\n                    parse_error("Invalid escaped identifier char");\n                }\n            } else {\n                if (!is_identifier_char(ch)) {\n                    break;\n                }\n                next();\n            }\n            name += ch;\n        }\n        if (RESERVED_WORDS(name) && escaped) {\n            parse_error("Escaped characters are not allowed in keywords");\n        }\n        return name;\n    });\n\n    var read_regexp = with_eof_error("Unterminated regular expression", function(source) {\n        var prev_backslash = false, ch, in_class = false;\n        while ((ch = next(true))) if (NEWLINE_CHARS(ch)) {\n            parse_error("Unexpected line terminator");\n        } else if (prev_backslash) {\n            source += "\\\\" + ch;\n            prev_backslash = false;\n        } else if (ch == "[") {\n            in_class = true;\n            source += ch;\n        } else if (ch == "]" && in_class) {\n            in_class = false;\n            source += ch;\n        } else if (ch == "/" && !in_class) {\n            break;\n        } else if (ch == "\\\\") {\n            prev_backslash = true;\n        } else {\n            source += ch;\n        }\n        var mods = read_name();\n        try {\n            var regexp = new RegExp(source, mods);\n            regexp.raw_source = source;\n            return token("regexp", regexp);\n        } catch(e) {\n            parse_error(e.message);\n        }\n    });\n\n    function read_operator(prefix) {\n        function grow(op) {\n            if (!peek()) return op;\n            var bigger = op + peek();\n            if (OPERATORS(bigger)) {\n                next();\n                return grow(bigger);\n            } else {\n                return op;\n            }\n        };\n        return token("operator", grow(prefix || next()));\n    };\n\n    function handle_slash() {\n        next();\n        switch (peek()) {\n          case "/":\n            next();\n            return skip_line_comment("comment1");\n          case "*":\n            next();\n            return skip_multiline_comment();\n        }\n        return S.regex_allowed ? read_regexp("") : read_operator("/");\n    };\n\n    function handle_eq_sign() {\n        next();\n        if (peek() === ">") {\n            next();\n            return token("arrow", "=>");\n        } else {\n            return read_operator("=");\n        }\n    };\n\n    function handle_dot() {\n        next();\n        if (is_digit(peek().charCodeAt(0))) {\n            return read_num(".");\n        }\n        if (peek() === ".") {\n            next();  // Consume second dot\n            next();  // Consume third dot\n            return token("expand", "...");\n        }\n\n        return token("punc", ".");\n    };\n\n    function read_word() {\n        var word = read_name();\n        if (prev_was_dot) return token("name", word);\n        return KEYWORDS_ATOM(word) ? token("atom", word)\n            : !KEYWORDS(word) ? token("name", word)\n            : OPERATORS(word) ? token("operator", word)\n            : token("keyword", word);\n    };\n\n    function with_eof_error(eof_error, cont) {\n        return function(x) {\n            try {\n                return cont(x);\n            } catch(ex) {\n                if (ex === EX_EOF) parse_error(eof_error);\n                else throw ex;\n            }\n        };\n    };\n\n    function next_token(force_regexp) {\n        if (force_regexp != null)\n            return read_regexp(force_regexp);\n        if (shebang && S.pos == 0 && looking_at("#!")) {\n            start_token();\n            forward(2);\n            skip_line_comment("comment5");\n        }\n        for (;;) {\n            skip_whitespace();\n            start_token();\n            if (html5_comments) {\n                if (looking_at("\x3c!--")) {\n                    forward(4);\n                    skip_line_comment("comment3");\n                    continue;\n                }\n                if (looking_at("--\x3e") && S.newline_before) {\n                    forward(3);\n                    skip_line_comment("comment4");\n                    continue;\n                }\n            }\n            var ch = peek();\n            if (!ch) return token("eof");\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 34: case 39: return read_string(ch);\n              case 46: return handle_dot();\n              case 47: {\n                  var tok = handle_slash();\n                  if (tok === next_token) continue;\n                  return tok;\n              }\n              case 61: return handle_eq_sign();\n              case 96: return read_template_characters(true);\n              case 123:\n                S.brace_counter++;\n                break;\n              case 125:\n                S.brace_counter--;\n                if (S.template_braces.length > 0\n                    && S.template_braces[S.template_braces.length - 1] === S.brace_counter)\n                    return read_template_characters(false);\n                break;\n            }\n            if (is_digit(code)) return read_num();\n            if (PUNC_CHARS(ch)) return token("punc", next());\n            if (OPERATOR_CHARS(ch)) return read_operator();\n            if (code == 92 || is_identifier_start(ch)) return read_word();\n            break;\n        }\n        parse_error("Unexpected character \'" + ch + "\'");\n    };\n\n    next_token.next = next;\n    next_token.peek = peek;\n\n    next_token.context = function(nc) {\n        if (nc) S = nc;\n        return S;\n    };\n\n    next_token.add_directive = function(directive) {\n        S.directive_stack[S.directive_stack.length - 1].push(directive);\n\n        if (S.directives[directive] === undefined) {\n            S.directives[directive] = 1;\n        } else {\n            S.directives[directive]++;\n        }\n    }\n\n    next_token.push_directives_stack = function() {\n        S.directive_stack.push([]);\n    }\n\n    next_token.pop_directives_stack = function() {\n        var directives = S.directive_stack[S.directive_stack.length - 1];\n\n        for (var i = 0; i < directives.length; i++) {\n            S.directives[directives[i]]--;\n        }\n\n        S.directive_stack.pop();\n    }\n\n    next_token.has_directive = function(directive) {\n        return S.directives[directive] > 0;\n    }\n\n    return next_token;\n\n};\n\n/* -----[ Parser (constants) ]----- */\n\nvar UNARY_PREFIX = makePredicate([\n    "typeof",\n    "void",\n    "delete",\n    "--",\n    "++",\n    "!",\n    "~",\n    "-",\n    "+"\n]);\n\nvar UNARY_POSTFIX = makePredicate([ "--", "++" ]);\n\nvar ASSIGNMENT = makePredicate([ "=", "+=", "-=", "/=", "*=", "**=", "%=", ">>=", "<<=", ">>>=", "|=", "^=", "&=" ]);\n\nvar PRECEDENCE = (function(a, ret){\n    for (var i = 0; i < a.length; ++i) {\n        var b = a[i];\n        for (var j = 0; j < b.length; ++j) {\n            ret[b[j]] = i + 1;\n        }\n    }\n    return ret;\n})(\n    [\n        ["||"],\n        ["&&"],\n        ["|"],\n        ["^"],\n        ["&"],\n        ["==", "===", "!=", "!=="],\n        ["<", ">", "<=", ">=", "in", "instanceof"],\n        [">>", "<<", ">>>"],\n        ["+", "-"],\n        ["*", "/", "%"],\n        ["**"]\n    ],\n    {}\n);\n\nvar ATOMIC_START_TOKEN = makePredicate([ "atom", "num", "string", "regexp", "name" ]);\n\n/* -----[ Parser ]----- */\n\nfunction parse($TEXT, options) {\n\n    options = defaults(options, {\n        bare_returns   : false,\n        ecma           : 8,\n        expression     : false,\n        filename       : null,\n        html5_comments : true,\n        shebang        : true,\n        strict         : false,\n        toplevel       : null,\n    }, true);\n\n    var S = {\n        input         : (typeof $TEXT == "string"\n                         ? tokenizer($TEXT, options.filename,\n                                     options.html5_comments, options.shebang)\n                         : $TEXT),\n        token         : null,\n        prev          : null,\n        peeked        : null,\n        in_function   : 0,\n        in_async      : -1,\n        in_generator  : -1,\n        in_directives : true,\n        in_loop       : 0,\n        labels        : []\n    };\n\n    S.token = next();\n\n    function is(type, value) {\n        return is_token(S.token, type, value);\n    };\n\n    function peek() { return S.peeked || (S.peeked = S.input()); };\n\n    function next() {\n        S.prev = S.token;\n        if (S.peeked) {\n            S.token = S.peeked;\n            S.peeked = null;\n        } else {\n            S.token = S.input();\n        }\n        S.in_directives = S.in_directives && (\n            S.token.type == "string" || is("punc", ";")\n        );\n        return S.token;\n    };\n\n    function prev() {\n        return S.prev;\n    };\n\n    function croak(msg, line, col, pos) {\n        var ctx = S.input.context();\n        js_error(msg,\n                 ctx.filename,\n                 line != null ? line : ctx.tokline,\n                 col != null ? col : ctx.tokcol,\n                 pos != null ? pos : ctx.tokpos);\n    };\n\n    function token_error(token, msg) {\n        croak(msg, token.line, token.col);\n    };\n\n    function unexpected(token) {\n        if (token == null)\n            token = S.token;\n        token_error(token, "Unexpected token: " + token.type + " (" + token.value + ")");\n    };\n\n    function expect_token(type, val) {\n        if (is(type, val)) {\n            return next();\n        }\n        token_error(S.token, "Unexpected token " + S.token.type + " «" + S.token.value + "»" + ", expected " + type + " «" + val + "»");\n    };\n\n    function expect(punc) { return expect_token("punc", punc); };\n\n    function has_newline_before(token) {\n        return token.nlb || !all(token.comments_before, function(comment) {\n            return !comment.nlb;\n        });\n    }\n\n    function can_insert_semicolon() {\n        return !options.strict\n            && (is("eof") || is("punc", "}") || has_newline_before(S.token));\n    };\n\n    function is_in_generator() {\n        return S.in_generator === S.in_function;\n    }\n\n    function is_in_async() {\n        return S.in_async === S.in_function;\n    }\n\n    function semicolon(optional) {\n        if (is("punc", ";")) next();\n        else if (!optional && !can_insert_semicolon()) unexpected();\n    };\n\n    function parenthesised() {\n        expect("(");\n        var exp = expression(true);\n        expect(")");\n        return exp;\n    };\n\n    function embed_tokens(parser) {\n        return function() {\n            var start = S.token;\n            var expr = parser.apply(null, arguments);\n            var end = prev();\n            expr.start = start;\n            expr.end = end;\n            return expr;\n        };\n    };\n\n    function handle_regexp() {\n        if (is("operator", "/") || is("operator", "/=")) {\n            S.peeked = null;\n            S.token = S.input(S.token.value.substr(1)); // force regexp\n        }\n    };\n\n    var statement = embed_tokens(function(is_export_default) {\n        handle_regexp();\n        switch (S.token.type) {\n          case "string":\n            if (S.in_directives) {\n                var token = peek();\n                if (S.token.raw.indexOf("\\\\") == -1\n                    && (is_token(token, "punc", ";")\n                        || is_token(token, "punc", "}")\n                        || has_newline_before(token)\n                        || is_token(token, "eof"))) {\n                    S.input.add_directive(S.token.value);\n                } else {\n                    S.in_directives = false;\n                }\n            }\n            var dir = S.in_directives, stat = simple_statement();\n            return dir ? new AST_Directive(stat.body) : stat;\n          case "template_head":\n          case "num":\n          case "regexp":\n          case "operator":\n          case "atom":\n            return simple_statement();\n\n          case "name":\n            if (S.token.value == "async" && is_token(peek(), "keyword", "function")) {\n                next();\n                next();\n                return function_(AST_Defun, false, true, is_export_default);\n            }\n            if (S.token.value == "import" && !is_token(peek(), "punc", "(")) {\n                next();\n                var node = import_();\n                semicolon();\n                return node;\n            }\n            return is_token(peek(), "punc", ":")\n                ? labeled_statement()\n                : simple_statement();\n\n          case "punc":\n            switch (S.token.value) {\n              case "{":\n                return new AST_BlockStatement({\n                    start : S.token,\n                    body  : block_(),\n                    end   : prev()\n                });\n              case "[":\n              case "(":\n                return simple_statement();\n              case ";":\n                S.in_directives = false;\n                next();\n                return new AST_EmptyStatement();\n              default:\n                unexpected();\n            }\n\n          case "keyword":\n            switch (S.token.value) {\n              case "break":\n                next();\n                return break_cont(AST_Break);\n\n              case "continue":\n                next();\n                return break_cont(AST_Continue);\n\n              case "debugger":\n                next();\n                semicolon();\n                return new AST_Debugger();\n\n              case "do":\n                next();\n                var body = in_loop(statement);\n                expect_token("keyword", "while");\n                var condition = parenthesised();\n                semicolon(true);\n                return new AST_Do({\n                    body      : body,\n                    condition : condition\n                });\n\n              case "while":\n                next();\n                return new AST_While({\n                    condition : parenthesised(),\n                    body      : in_loop(statement)\n                });\n\n              case "for":\n                next();\n                return for_();\n\n              case "class":\n                next();\n                return class_(AST_DefClass);\n\n              case "function":\n                next();\n                return function_(AST_Defun, false, false, is_export_default);\n\n              case "if":\n                next();\n                return if_();\n\n              case "return":\n                if (S.in_function == 0 && !options.bare_returns)\n                    croak("\'return\' outside of function");\n                next();\n                var value = null;\n                if (is("punc", ";")) {\n                    next();\n                } else if (!can_insert_semicolon()) {\n                    value = expression(true);\n                    semicolon();\n                }\n                return new AST_Return({\n                    value: value\n                });\n\n              case "switch":\n                next();\n                return new AST_Switch({\n                    expression : parenthesised(),\n                    body       : in_loop(switch_body_)\n                });\n\n              case "throw":\n                next();\n                if (has_newline_before(S.token))\n                    croak("Illegal newline after \'throw\'");\n                var value = expression(true);\n                semicolon();\n                return new AST_Throw({\n                    value: value\n                });\n\n              case "try":\n                next();\n                return try_();\n\n              case "var":\n                next();\n                var node = var_();\n                semicolon();\n                return node;\n\n              case "let":\n                next();\n                var node = let_();\n                semicolon();\n                return node;\n\n              case "const":\n                next();\n                var node = const_();\n                semicolon();\n                return node;\n\n              case "with":\n                if (S.input.has_directive("use strict")) {\n                    croak("Strict mode may not include a with statement");\n                }\n                next();\n                return new AST_With({\n                    expression : parenthesised(),\n                    body       : statement()\n                });\n\n              case "export":\n                if (!is_token(peek(), "punc", "(")) {\n                    next();\n                    return export_();\n                }\n            }\n        }\n        unexpected();\n    });\n\n    function labeled_statement() {\n        var label = as_symbol(AST_Label);\n        if (label.name === "await" && is_in_async()) {\n            token_error(S.prev, "await cannot be used as label inside async function");\n        }\n        if (find_if(function(l){ return l.name == label.name }, S.labels)) {\n            // ECMA-262, 12.12: An ECMAScript program is considered\n            // syntactically incorrect if it contains a\n            // LabelledStatement that is enclosed by a\n            // LabelledStatement with the same Identifier as label.\n            croak("Label " + label.name + " defined twice");\n        }\n        expect(":");\n        S.labels.push(label);\n        var stat = statement();\n        S.labels.pop();\n        if (!(stat instanceof AST_IterationStatement)) {\n            // check for `continue` that refers to this label.\n            // those should be reported as syntax errors.\n            // https://github.com/mishoo/UglifyJS2/issues/287\n            label.references.forEach(function(ref){\n                if (ref instanceof AST_Continue) {\n                    ref = ref.label.start;\n                    croak("Continue label `" + label.name + "` refers to non-IterationStatement.",\n                          ref.line, ref.col, ref.pos);\n                }\n            });\n        }\n        return new AST_LabeledStatement({ body: stat, label: label });\n    };\n\n    function simple_statement(tmp) {\n        return new AST_SimpleStatement({ body: (tmp = expression(true), semicolon(), tmp) });\n    };\n\n    function break_cont(type) {\n        var label = null, ldef;\n        if (!can_insert_semicolon()) {\n            label = as_symbol(AST_LabelRef, true);\n        }\n        if (label != null) {\n            ldef = find_if(function(l){ return l.name == label.name }, S.labels);\n            if (!ldef)\n                croak("Undefined label " + label.name);\n            label.thedef = ldef;\n        }\n        else if (S.in_loop == 0)\n            croak(type.TYPE + " not inside a loop or switch");\n        semicolon();\n        var stat = new type({ label: label });\n        if (ldef) ldef.references.push(stat);\n        return stat;\n    };\n\n    function for_() {\n        expect("(");\n        var init = null;\n        if (!is("punc", ";")) {\n            init =\n                is("keyword", "var") ? (next(), var_(true)) :\n                is("keyword", "let") ? (next(), let_(true)) :\n                is("keyword", "const") ? (next(), const_(true)) :\n                                       expression(true, true);\n            var is_in = is("operator", "in");\n            var is_of = is("name", "of");\n            if (is_in || is_of) {\n                if (init instanceof AST_Definitions) {\n                    if (init.definitions.length > 1)\n                        croak("Only one variable declaration allowed in for..in loop", init.start.line, init.start.col, init.start.pos);\n                } else if (!(is_assignable(init) || (init = to_destructuring(init)) instanceof AST_Destructuring)) {\n                    croak("Invalid left-hand side in for..in loop", init.start.line, init.start.col, init.start.pos);\n                }\n                next();\n                if (is_in) {\n                    return for_in(init);\n                } else {\n                    return for_of(init);\n                }\n            }\n        }\n        return regular_for(init);\n    };\n\n    function regular_for(init) {\n        expect(";");\n        var test = is("punc", ";") ? null : expression(true);\n        expect(";");\n        var step = is("punc", ")") ? null : expression(true);\n        expect(")");\n        return new AST_For({\n            init      : init,\n            condition : test,\n            step      : step,\n            body      : in_loop(statement)\n        });\n    };\n\n    function for_of(init) {\n        var lhs = init instanceof AST_Definitions ? init.definitions[0].name : null;\n        var obj = expression(true);\n        expect(")");\n        return new AST_ForOf({\n            init   : init,\n            name   : lhs,\n            object : obj,\n            body   : in_loop(statement)\n        });\n    };\n\n    function for_in(init) {\n        var obj = expression(true);\n        expect(")");\n        return new AST_ForIn({\n            init   : init,\n            object : obj,\n            body   : in_loop(statement)\n        });\n    };\n\n    var arrow_function = function(start, argnames, is_async) {\n        if (has_newline_before(S.token)) {\n            croak("Unexpected newline before arrow (=>)");\n        }\n\n        expect_token("arrow", "=>");\n\n        var body = _function_body(is("punc", "{"), false, is_async);\n\n        return new AST_Arrow({\n            start    : start,\n            end      : body.end,\n            async    : is_async,\n            argnames : argnames,\n            body     : body\n        });\n    };\n\n    var function_ = function(ctor, is_generator_property, is_async, is_export_default) {\n        if (is_generator_property && is_async) croak("generators cannot be async");\n        var start = S.token;\n\n        var in_statement = ctor === AST_Defun;\n        var is_generator = is("operator", "*");\n        if (is_generator) {\n            next();\n        }\n\n        var name = is("name") ? as_symbol(in_statement ? AST_SymbolDefun : AST_SymbolLambda) : null;\n        if (in_statement && !name) {\n            if (is_export_default) {\n                ctor = AST_Function;\n            } else {\n                unexpected();\n            }\n        }\n\n        if (name && ctor !== AST_Accessor && !(name instanceof AST_SymbolDeclaration))\n            unexpected(prev());\n\n        var args = [];\n        var body = _function_body(true, is_generator || is_generator_property, is_async, name, args);\n        return new ctor({\n            start : args.start,\n            end   : body.end,\n            is_generator: is_generator,\n            async : is_async,\n            name  : name,\n            argnames: args,\n            body  : body\n        });\n    };\n\n    function track_used_binding_identifiers(is_parameter, strict) {\n        var parameters = {};\n        var duplicate = false;\n        var default_assignment = false;\n        var spread = false;\n        var strict_mode = !!strict;\n        var tracker = {\n            add_parameter: function(token) {\n                if (parameters["$" + token.value] !== undefined) {\n                    if (duplicate === false) {\n                        duplicate = token;\n                    }\n                    tracker.check_strict();\n                } else {\n                    parameters["$" + token.value] = true;\n                    if (is_parameter) {\n                        switch (token.value) {\n                          case "arguments":\n                          case "eval":\n                          case "yield":\n                            if (strict_mode) {\n                                token_error(token, "Unexpected " + token.value + " identifier as parameter inside strict mode");\n                            }\n                            break;\n                          default:\n                            if (RESERVED_WORDS(token.value)) {\n                                unexpected();\n                            }\n                        }\n                    }\n                }\n            },\n            mark_default_assignment: function(token) {\n                if (default_assignment === false) {\n                    default_assignment = token;\n                }\n            },\n            mark_spread: function(token) {\n                if (spread === false) {\n                    spread = token;\n                }\n            },\n            mark_strict_mode: function() {\n                strict_mode = true;\n            },\n            is_strict: function() {\n                return default_assignment !== false || spread !== false || strict_mode\n            },\n            check_strict: function() {\n                if (tracker.is_strict() && duplicate !== false) {\n                    token_error(duplicate, "Parameter " + duplicate.value + " was used already");\n                }\n            }\n        };\n\n        return tracker;\n    }\n\n    function parameters(params) {\n        var start = S.token;\n        var used_parameters = track_used_binding_identifiers(true, S.input.has_directive("use strict"));\n\n        expect("(");\n\n        while (!is("punc", ")")) {\n            var param = parameter(used_parameters);\n            params.push(param);\n\n            if (!is("punc", ")")) {\n                expect(",");\n                if (is("punc", ")") && options.ecma < 8) unexpected();\n            }\n\n            if (param instanceof AST_Expansion) {\n                break;\n            }\n        }\n\n        next();\n    }\n\n    function parameter(used_parameters, symbol_type) {\n        var param;\n        var expand = false;\n        if (used_parameters === undefined) {\n            used_parameters = track_used_binding_identifiers(true, S.input.has_directive("use strict"));\n        }\n        if (is("expand", "...")) {\n            expand = S.token;\n            used_parameters.mark_spread(S.token);\n            next();\n        }\n        param = binding_element(used_parameters, symbol_type);\n\n        if (is("operator", "=") && expand === false) {\n            used_parameters.mark_default_assignment(S.token);\n            next();\n            param = new AST_DefaultAssign({\n                start: param.start,\n                left: param,\n                operator: "=",\n                right: expression(false),\n                end: S.token\n            });\n        }\n\n        if (expand !== false) {\n            if (!is("punc", ")")) {\n                unexpected();\n            }\n            param = new AST_Expansion({\n                start: expand,\n                expression: param,\n                end: expand\n            });\n        }\n        used_parameters.check_strict();\n\n        return param;\n    }\n\n    function binding_element(used_parameters, symbol_type) {\n        var elements = [];\n        var first = true;\n        var is_expand = false;\n        var expand_token;\n        var first_token = S.token;\n        if (used_parameters === undefined) {\n            used_parameters = track_used_binding_identifiers(false, S.input.has_directive("use strict"));\n        }\n        symbol_type = symbol_type === undefined ? AST_SymbolFunarg : symbol_type;\n        if (is("punc", "[")) {\n            next();\n            while (!is("punc", "]")) {\n                if (first) {\n                    first = false;\n                } else {\n                    expect(",");\n                }\n\n                if (is("expand", "...")) {\n                    is_expand = true;\n                    expand_token = S.token;\n                    used_parameters.mark_spread(S.token);\n                    next();\n                }\n                if (is("punc")) {\n                    switch (S.token.value) {\n                      case ",":\n                        elements.push(new AST_Hole({\n                            start: S.token,\n                            end: S.token\n                        }));\n                        continue;\n                      case "]": // Trailing comma after last element\n                        break;\n                      case "[":\n                      case "{":\n                        elements.push(binding_element(used_parameters, symbol_type));\n                        break;\n                      default:\n                        unexpected();\n                    }\n                } else if (is("name")) {\n                    used_parameters.add_parameter(S.token);\n                    elements.push(as_symbol(symbol_type));\n                } else {\n                    croak("Invalid function parameter");\n                }\n                if (is("operator", "=") && is_expand === false) {\n                    used_parameters.mark_default_assignment(S.token);\n                    next();\n                    elements[elements.length - 1] = new AST_DefaultAssign({\n                        start: elements[elements.length - 1].start,\n                        left: elements[elements.length - 1],\n                        operator: "=",\n                        right: expression(false),\n                        end: S.token\n                    });\n                }\n                if (is_expand) {\n                    if (!is("punc", "]")) {\n                        croak("Rest element must be last element");\n                    }\n                    elements[elements.length - 1] = new AST_Expansion({\n                        start: expand_token,\n                        expression: elements[elements.length - 1],\n                        end: expand_token\n                    });\n                }\n            }\n            expect("]");\n            used_parameters.check_strict();\n            return new AST_Destructuring({\n                start: first_token,\n                names: elements,\n                is_array: true,\n                end: prev()\n            });\n        } else if (is("punc", "{")) {\n            next();\n            while (!is("punc", "}")) {\n                if (first) {\n                    first = false;\n                } else {\n                    expect(",");\n                }\n                if (is("expand", "...")) {\n                    is_expand = true;\n                    expand_token = S.token;\n                    used_parameters.mark_spread(S.token);\n                    next();\n                }\n                if (is("name") && (is_token(peek(), "punc") || is_token(peek(), "operator")) && [",", "}", "="].indexOf(peek().value) !== -1) {\n                    used_parameters.add_parameter(S.token);\n                    var start = prev();\n                    var value = as_symbol(symbol_type);\n                    if (is_expand) {\n                        elements.push(new AST_Expansion({\n                            start: expand_token,\n                            expression: value,\n                            end: value.end,\n                        }));\n                    } else {\n                        elements.push(new AST_ObjectKeyVal({\n                            start: start,\n                            key: value.name,\n                            value: value,\n                            end: value.end,\n                        }));\n                    }\n                } else if (is("punc", "}")) {\n                    continue; // Allow trailing hole\n                } else {\n                    var property_token = S.token;\n                    var property = as_property_name();\n                    if (property === null) {\n                        unexpected(prev());\n                    } else if (prev().type === "name" && !is("punc", ":")) {\n                        elements.push(new AST_ObjectKeyVal({\n                            start: prev(),\n                            key: property,\n                            value: new symbol_type({\n                                start: prev(),\n                                name: property,\n                                end: prev()\n                            }),\n                            end: prev()\n                        }));\n                    } else {\n                        expect(":");\n                        elements.push(new AST_ObjectKeyVal({\n                            start: property_token,\n                            quote: property_token.quote,\n                            key: property,\n                            value: binding_element(used_parameters, symbol_type),\n                            end: prev()\n                        }));\n                    }\n                }\n                if (is_expand) {\n                    if (!is("punc", "}")) {\n                        croak("Rest element must be last element");\n                    }\n                }\n                else if (is("operator", "=")) {\n                    used_parameters.mark_default_assignment(S.token);\n                    next();\n                    elements[elements.length - 1].value = new AST_DefaultAssign({\n                        start: elements[elements.length - 1].value.start,\n                        left: elements[elements.length - 1].value,\n                        operator: "=",\n                        right: expression(false),\n                        end: S.token\n                    });\n                }\n            }\n            expect("}");\n            used_parameters.check_strict();\n            return new AST_Destructuring({\n                start: first_token,\n                names: elements,\n                is_array: false,\n                end: prev()\n            });\n        } else if (is("name")) {\n            used_parameters.add_parameter(S.token);\n            return as_symbol(symbol_type);\n        } else {\n            croak("Invalid function parameter");\n        }\n    }\n\n    function params_or_seq_(allow_arrows, maybe_sequence) {\n        var spread_token;\n        var invalid_sequence;\n        var trailing_comma;\n        var a = [];\n        expect("(");\n        while (!is("punc", ")")) {\n            if (spread_token) unexpected(spread_token);\n            if (is("expand", "...")) {\n                spread_token = S.token;\n                if (maybe_sequence) invalid_sequence = S.token;\n                next();\n                a.push(new AST_Expansion({\n                    start: prev(),\n                    expression: expression(),\n                    end: S.token,\n                }));\n            } else {\n                a.push(expression());\n            }\n            if (!is("punc", ")")) {\n                expect(",");\n                if (is("punc", ")")) {\n                    if (options.ecma < 8) unexpected();\n                    trailing_comma = prev();\n                    if (maybe_sequence) invalid_sequence = trailing_comma;\n                }\n            }\n        }\n        expect(")");\n        if (allow_arrows && is("arrow", "=>")) {\n            if (spread_token && trailing_comma) unexpected(trailing_comma);\n        } else if (invalid_sequence) {\n            unexpected(invalid_sequence);\n        }\n        return a;\n    }\n\n    function _function_body(block, generator, is_async, name, args) {\n        var loop = S.in_loop;\n        var labels = S.labels;\n        var current_generator = S.in_generator;\n        var current_async = S.in_async;\n        ++S.in_function;\n        if (generator)\n            S.in_generator = S.in_function;\n        if (is_async)\n            S.in_async = S.in_function;\n        if (args) parameters(args);\n        if (block)\n            S.in_directives = true;\n        S.in_loop = 0;\n        S.labels = [];\n        if (block) {\n            S.input.push_directives_stack();\n            var a = block_();\n            if (name) _verify_symbol(name);\n            if (args) args.forEach(_verify_symbol);\n            S.input.pop_directives_stack();\n        } else {\n            var a = expression(false);\n        }\n        --S.in_function;\n        S.in_loop = loop;\n        S.labels = labels;\n        S.in_generator = current_generator;\n        S.in_async = current_async;\n        return a;\n    }\n\n    function _await_expression() {\n        // Previous token must be "await" and not be interpreted as an identifier\n        if (!is_in_async()) {\n            croak("Unexpected await expression outside async function",\n                S.prev.line, S.prev.col, S.prev.pos);\n        }\n        // the await expression is parsed as a unary expression in Babel\n        return new AST_Await({\n            expression : maybe_unary(true),\n        });\n    }\n\n    function _yield_expression() {\n        // Previous token must be keyword yield and not be interpret as an identifier\n        if (!is_in_generator()) {\n            croak("Unexpected yield expression outside generator function",\n                S.prev.line, S.prev.col, S.prev.pos);\n        }\n        var star = false;\n        var has_expression = true;\n\n        // Attempt to get expression or star (and then the mandatory expression)\n        // behind yield on the same line.\n        //\n        // If nothing follows on the same line of the yieldExpression,\n        // it should default to the value `undefined` for yield to return.\n        // In that case, the `undefined` stored as `null` in ast.\n        //\n        // Note 1: It isn\'t allowed for yield* to close without an expression\n        // Note 2: If there is a nlb between yield and star, it is interpret as\n        //         yield <explicit undefined> <inserted automatic semicolon> *\n        if (can_insert_semicolon() ||\n            (is("punc") && PUNC_AFTER_EXPRESSION(S.token.value))) {\n            has_expression = false;\n\n        } else if (is("operator", "*")) {\n            star = true;\n            next();\n        }\n\n        return new AST_Yield({\n            is_star    : star,\n            expression : has_expression ? expression() : null\n        });\n    }\n\n    function if_() {\n        var cond = parenthesised(), body = statement(), belse = null;\n        if (is("keyword", "else")) {\n            next();\n            belse = statement();\n        }\n        return new AST_If({\n            condition   : cond,\n            body        : body,\n            alternative : belse\n        });\n    };\n\n    function block_() {\n        expect("{");\n        var a = [];\n        while (!is("punc", "}")) {\n            if (is("eof")) unexpected();\n            a.push(statement());\n        }\n        next();\n        return a;\n    };\n\n    function switch_body_() {\n        expect("{");\n        var a = [], cur = null, branch = null, tmp;\n        while (!is("punc", "}")) {\n            if (is("eof")) unexpected();\n            if (is("keyword", "case")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Case({\n                    start      : (tmp = S.token, next(), tmp),\n                    expression : expression(true),\n                    body       : cur\n                });\n                a.push(branch);\n                expect(":");\n            }\n            else if (is("keyword", "default")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Default({\n                    start : (tmp = S.token, next(), expect(":"), tmp),\n                    body  : cur\n                });\n                a.push(branch);\n            }\n            else {\n                if (!cur) unexpected();\n                cur.push(statement());\n            }\n        }\n        if (branch) branch.end = prev();\n        next();\n        return a;\n    };\n\n    function try_() {\n        var body = block_(), bcatch = null, bfinally = null;\n        if (is("keyword", "catch")) {\n            var start = S.token;\n            next();\n            expect("(");\n            var name = parameter(undefined, AST_SymbolCatch);\n            expect(")");\n            bcatch = new AST_Catch({\n                start   : start,\n                argname : name,\n                body    : block_(),\n                end     : prev()\n            });\n        }\n        if (is("keyword", "finally")) {\n            var start = S.token;\n            next();\n            bfinally = new AST_Finally({\n                start : start,\n                body  : block_(),\n                end   : prev()\n            });\n        }\n        if (!bcatch && !bfinally)\n            croak("Missing catch/finally blocks");\n        return new AST_Try({\n            body     : body,\n            bcatch   : bcatch,\n            bfinally : bfinally\n        });\n    };\n\n    function vardefs(no_in, kind) {\n        var a = [];\n        var def;\n        for (;;) {\n            var sym_type =\n                kind === "var" ? AST_SymbolVar :\n                kind === "const" ? AST_SymbolConst :\n                kind === "let" ? AST_SymbolLet : null;\n            if (is("punc", "{") || is("punc", "[")) {\n                def = new AST_VarDef({\n                    start: S.token,\n                    name: binding_element(undefined ,sym_type),\n                    value: is("operator", "=") ? (expect_token("operator", "="), expression(false, no_in)) : null,\n                    end: prev()\n                });\n            } else {\n                def = new AST_VarDef({\n                    start : S.token,\n                    name  : as_symbol(sym_type),\n                    value : is("operator", "=")\n                        ? (next(), expression(false, no_in))\n                        : !no_in && kind === "const"\n                            ? croak("Missing initializer in const declaration") : null,\n                    end   : prev()\n                });\n                if (def.name.name == "import") croak("Unexpected token: import");\n            }\n            a.push(def);\n            if (!is("punc", ","))\n                break;\n            next();\n        }\n        return a;\n    };\n\n    var var_ = function(no_in) {\n        return new AST_Var({\n            start       : prev(),\n            definitions : vardefs(no_in, "var"),\n            end         : prev()\n        });\n    };\n\n    var let_ = function(no_in) {\n        return new AST_Let({\n            start       : prev(),\n            definitions : vardefs(no_in, "let"),\n            end         : prev()\n        });\n    };\n\n    var const_ = function(no_in) {\n        return new AST_Const({\n            start       : prev(),\n            definitions : vardefs(no_in, "const"),\n            end         : prev()\n        });\n    };\n\n    var new_ = function(allow_calls) {\n        var start = S.token;\n        expect_token("operator", "new");\n        if (is("punc", ".")) {\n            next();\n            expect_token("name", "target");\n            return subscripts(new AST_NewTarget({\n                start : start,\n                end   : prev()\n            }), allow_calls);\n        }\n        var newexp = expr_atom(false), args;\n        if (is("punc", "(")) {\n            next();\n            args = expr_list(")", options.ecma >= 8);\n        } else {\n            args = [];\n        }\n        var call = new AST_New({\n            start      : start,\n            expression : newexp,\n            args       : args,\n            end        : prev()\n        });\n        mark_pure(call);\n        return subscripts(call, allow_calls);\n    };\n\n    function as_atom_node() {\n        var tok = S.token, ret;\n        switch (tok.type) {\n          case "name":\n            ret = _make_symbol(AST_SymbolRef);\n            break;\n          case "num":\n            ret = new AST_Number({ start: tok, end: tok, value: tok.value });\n            break;\n          case "string":\n            ret = new AST_String({\n                start : tok,\n                end   : tok,\n                value : tok.value,\n                quote : tok.quote\n            });\n            break;\n          case "regexp":\n            ret = new AST_RegExp({ start: tok, end: tok, value: tok.value });\n            break;\n          case "atom":\n            switch (tok.value) {\n              case "false":\n                ret = new AST_False({ start: tok, end: tok });\n                break;\n              case "true":\n                ret = new AST_True({ start: tok, end: tok });\n                break;\n              case "null":\n                ret = new AST_Null({ start: tok, end: tok });\n                break;\n            }\n            break;\n        }\n        next();\n        return ret;\n    };\n\n    function to_fun_args(ex, _, __, default_seen_above) {\n        var insert_default = function(ex, default_value) {\n            if (default_value) {\n                return new AST_DefaultAssign({\n                    start: ex.start,\n                    left: ex,\n                    operator: "=",\n                    right: default_value,\n                    end: default_value.end\n                });\n            }\n            return ex;\n        }\n        if (ex instanceof AST_Object) {\n            return insert_default(new AST_Destructuring({\n                start: ex.start,\n                end: ex.end,\n                is_array: false,\n                names: ex.properties.map(to_fun_args)\n            }), default_seen_above);\n        } else if (ex instanceof AST_ObjectKeyVal) {\n            ex.value = to_fun_args(ex.value, 0, [ex.key]);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_Hole) {\n            return ex;\n        } else if (ex instanceof AST_Destructuring) {\n            ex.names = ex.names.map(to_fun_args);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_SymbolRef) {\n            return insert_default(new AST_SymbolFunarg({\n                name: ex.name,\n                start: ex.start,\n                end: ex.end\n            }), default_seen_above);\n        } else if (ex instanceof AST_Expansion) {\n            ex.expression = to_fun_args(ex.expression);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_Array) {\n            return insert_default(new AST_Destructuring({\n                start: ex.start,\n                end: ex.end,\n                is_array: true,\n                names: ex.elements.map(to_fun_args)\n            }), default_seen_above);\n        } else if (ex instanceof AST_Assign) {\n            return insert_default(to_fun_args(ex.left, undefined, undefined, ex.right), default_seen_above);\n        } else if (ex instanceof AST_DefaultAssign) {\n            ex.left = to_fun_args(ex.left, 0, [ex.left]);\n            return ex;\n        } else {\n            croak("Invalid function parameter", ex.start.line, ex.start.col);\n        }\n    }\n\n    var expr_atom = function(allow_calls, allow_arrows) {\n        if (is("operator", "new")) {\n            return new_(allow_calls);\n        }\n        var start = S.token;\n        var async = is("name", "async") && as_atom_node();\n        if (is("punc")) {\n            switch (S.token.value) {\n              case "(":\n                if (async && !allow_calls) break;\n                var exprs = params_or_seq_(allow_arrows, !async);\n                if (allow_arrows && is("arrow", "=>")) {\n                    return arrow_function(start, exprs.map(to_fun_args), !!async);\n                }\n                var ex = async ? new AST_Call({\n                    expression: async,\n                    args: exprs\n                }) : exprs.length == 1 ? exprs[0] : new AST_Sequence({\n                    expressions: exprs\n                });\n                if (ex.start) {\n                    var len = start.comments_before.length;\n                    [].unshift.apply(ex.start.comments_before, start.comments_before);\n                    start.comments_before = ex.start.comments_before;\n                    start.comments_before_length = len;\n                    if (len == 0 && start.comments_before.length > 0) {\n                        var comment = start.comments_before[0];\n                        if (!comment.nlb) {\n                            comment.nlb = start.nlb;\n                            start.nlb = false;\n                        }\n                    }\n                    start.comments_after = ex.start.comments_after;\n                }\n                ex.start = start;\n                var end = prev();\n                if (ex.end) {\n                    end.comments_before = ex.end.comments_before;\n                    [].push.apply(ex.end.comments_after, end.comments_after);\n                    end.comments_after = ex.end.comments_after;\n                }\n                ex.end = end;\n                if (ex instanceof AST_Call) mark_pure(ex);\n                return subscripts(ex, allow_calls);\n              case "[":\n                return subscripts(array_(), allow_calls);\n              case "{":\n                return subscripts(object_or_destructuring_(), allow_calls);\n            }\n            if (!async) unexpected();\n        }\n        if (allow_arrows && is("name") && is_token(peek(), "arrow")) {\n            var param = new AST_SymbolFunarg({\n                name: S.token.value,\n                start: start,\n                end: start,\n            });\n            next();\n            return arrow_function(start, [param], !!async);\n        }\n        if (is("keyword", "function")) {\n            next();\n            var func = function_(AST_Function, false, !!async);\n            func.start = start;\n            func.end = prev();\n            return subscripts(func, allow_calls);\n        }\n        if (async) return subscripts(async, allow_calls);\n        if (is("keyword", "class")) {\n            next();\n            var cls = class_(AST_ClassExpression);\n            cls.start = start;\n            cls.end = prev();\n            return subscripts(cls, allow_calls);\n        }\n        if (is("template_head")) {\n            return subscripts(template_string(), allow_calls);\n        }\n        if (ATOMIC_START_TOKEN(S.token.type)) {\n            return subscripts(as_atom_node(), allow_calls);\n        }\n        unexpected();\n    };\n\n    function template_string() {\n        var segments = [], start = S.token;\n\n        segments.push(new AST_TemplateSegment({\n            start: S.token,\n            raw: S.token.raw,\n            value: S.token.value,\n            end: S.token\n        }));\n        while (S.token.end === false) {\n            next();\n            handle_regexp();\n            segments.push(expression(true));\n\n            if (!is_token("template_substitution")) {\n                unexpected();\n            }\n\n            segments.push(new AST_TemplateSegment({\n                start: S.token,\n                raw: S.token.raw,\n                value: S.token.value,\n                end: S.token\n            }));\n        }\n        next();\n\n        return new AST_TemplateString({\n            start: start,\n            segments: segments,\n            end: S.token\n        });\n    }\n\n    function expr_list(closing, allow_trailing_comma, allow_empty) {\n        var first = true, a = [];\n        while (!is("punc", closing)) {\n            if (first) first = false; else expect(",");\n            if (allow_trailing_comma && is("punc", closing)) break;\n            if (is("punc", ",") && allow_empty) {\n                a.push(new AST_Hole({ start: S.token, end: S.token }));\n            } else if (is("expand", "...")) {\n                next();\n                a.push(new AST_Expansion({start: prev(), expression: expression(),end: S.token}));\n            } else {\n                a.push(expression(false));\n            }\n        }\n        next();\n        return a;\n    };\n\n    var array_ = embed_tokens(function() {\n        expect("[");\n        return new AST_Array({\n            elements: expr_list("]", !options.strict, true)\n        });\n    });\n\n    var create_accessor = embed_tokens(function(is_generator, is_async) {\n        return function_(AST_Accessor, is_generator, is_async);\n    });\n\n    var object_or_destructuring_ = embed_tokens(function object_or_destructuring_() {\n        var start = S.token, first = true, a = [];\n        expect("{");\n        while (!is("punc", "}")) {\n            if (first) first = false; else expect(",");\n            if (!options.strict && is("punc", "}"))\n                // allow trailing comma\n                break;\n\n            start = S.token;\n            if (start.type == "expand") {\n                next();\n                a.push(new AST_Expansion({\n                    start: start,\n                    expression: expression(false),\n                    end: prev(),\n                }));\n                continue;\n            }\n\n            var name = as_property_name();\n            var value;\n\n            // Check property and fetch value\n            if (!is("punc", ":")) {\n                var concise = concise_method_or_getset(name, start);\n                if (concise) {\n                    a.push(concise);\n                    continue;\n                }\n\n                value = new AST_SymbolRef({\n                    start: prev(),\n                    name: name,\n                    end: prev()\n                });\n            } else if (name === null) {\n                unexpected(prev());\n            } else {\n                next(); // `:` - see first condition\n                value = expression(false);\n            }\n\n            // Check for default value and alter value accordingly if necessary\n            if (is("operator", "=")) {\n                next();\n                value = new AST_Assign({\n                    start: start,\n                    left: value,\n                    operator: "=",\n                    right: expression(false),\n                    end: prev()\n                });\n            }\n\n            // Create property\n            a.push(new AST_ObjectKeyVal({\n                start: start,\n                quote: start.quote,\n                key: name instanceof AST_Node ? name : "" + name,\n                value: value,\n                end: prev()\n            }));\n        }\n        next();\n        return new AST_Object({ properties: a })\n    });\n\n    function class_(KindOfClass) {\n        var start, method, class_name, extends_, a = [];\n\n        S.input.push_directives_stack(); // Push directive stack, but not scope stack\n        S.input.add_directive("use strict");\n\n        if (S.token.type == "name" && S.token.value != "extends") {\n            class_name = as_symbol(KindOfClass === AST_DefClass ? AST_SymbolDefClass : AST_SymbolClass);\n        }\n\n        if (KindOfClass === AST_DefClass && !class_name) {\n            unexpected();\n        }\n\n        if (S.token.value == "extends") {\n            next();\n            extends_ = expression(true);\n        }\n\n        expect("{");\n\n        if (is("punc", ";")) { next(); }  // Leading semicolons are okay in class bodies.\n        while (!is("punc", "}")) {\n            start = S.token;\n            method = concise_method_or_getset(as_property_name(), start, true);\n            if (!method) { unexpected(); }\n            a.push(method);\n            if (is("punc", ";")) { next(); }\n        }\n\n        S.input.pop_directives_stack();\n\n        next();\n\n        return new KindOfClass({\n            start: start,\n            name: class_name,\n            extends: extends_,\n            properties: a,\n            end: prev(),\n        });\n    }\n\n    function concise_method_or_getset(name, start, is_class) {\n        var get_ast = function(name, token) {\n            if (typeof name === "string" || typeof name === "number") {\n                return new AST_SymbolMethod({\n                    start: token,\n                    name: "" + name,\n                    end: prev()\n                });\n            } else if (name === null) {\n                unexpected();\n            }\n            return name;\n        }\n        var is_async = false;\n        var is_static = false;\n        var is_generator = false;\n        var property_token = start;\n        if (is_class && name === "static" && !is("punc", "(")) {\n            is_static = true;\n            property_token = S.token;\n            name = as_property_name();\n        }\n        if (name === "async" && !is("punc", "(") && !is("punc", ",") && !is("punc", "}")) {\n            is_async = true;\n            property_token = S.token;\n            name = as_property_name();\n        }\n        if (name === null) {\n            is_generator = true;\n            property_token = S.token;\n            name = as_property_name();\n            if (name === null) {\n                unexpected();\n            }\n        }\n        if (is("punc", "(")) {\n            name = get_ast(name, start);\n            var node = new AST_ConciseMethod({\n                start       : start,\n                static      : is_static,\n                is_generator: is_generator,\n                async       : is_async,\n                key         : name,\n                quote       : name instanceof AST_SymbolMethod ?\n                              property_token.quote : undefined,\n                value       : create_accessor(is_generator, is_async),\n                end         : prev()\n            });\n            return node;\n        }\n        property_token = S.token;\n        if (name == "get") {\n            if (!is("punc") || is("punc", "[")) {\n                name = get_ast(as_property_name(), start);\n                return new AST_ObjectGetter({\n                    start : start,\n                    static: is_static,\n                    key   : name,\n                    quote : name instanceof AST_SymbolMethod ?\n                            property_token.quote : undefined,\n                    value : create_accessor(),\n                    end   : prev()\n                });\n            }\n        }\n        else if (name == "set") {\n            if (!is("punc") || is("punc", "[")) {\n                name = get_ast(as_property_name(), start);\n                return new AST_ObjectSetter({\n                    start : start,\n                    static: is_static,\n                    key   : name,\n                    quote : name instanceof AST_SymbolMethod ?\n                            property_token.quote : undefined,\n                    value : create_accessor(),\n                    end   : prev()\n                });\n            }\n        }\n    }\n\n    function import_() {\n        var start = prev();\n        var imported_name;\n        var imported_names;\n        if (is("name")) {\n            imported_name = as_symbol(AST_SymbolImport);\n        }\n\n        if (is("punc", ",")) {\n            next();\n        }\n\n        imported_names = map_names(true);\n\n        if (imported_names || imported_name) {\n            expect_token("name", "from");\n        }\n        var mod_str = S.token;\n        if (mod_str.type !== \'string\') {\n            unexpected();\n        }\n        next();\n        return new AST_Import({\n            start: start,\n            imported_name: imported_name,\n            imported_names: imported_names,\n            module_name: new AST_String({\n                start: mod_str,\n                value: mod_str.value,\n                quote: mod_str.quote,\n                end: mod_str,\n            }),\n            end: S.token,\n        });\n    }\n\n    function map_name(is_import) {\n        function make_symbol(type) {\n            return new type({\n                name: as_property_name(),\n                start: prev(),\n                end: prev()\n            });\n        }\n\n        var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n        var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n        var start = S.token;\n        var foreign_name;\n        var name;\n\n        if (is_import) {\n            foreign_name = make_symbol(foreign_type);\n        } else {\n            name = make_symbol(type);\n        }\n        if (is("name", "as")) {\n            next();  // The "as" word\n            if (is_import) {\n                name = make_symbol(type);\n            } else {\n                foreign_name = make_symbol(foreign_type);\n            }\n        } else if (is_import) {\n            name = new type(foreign_name);\n        } else {\n            foreign_name = new foreign_type(name);\n        }\n\n        return new AST_NameMapping({\n            start: start,\n            foreign_name: foreign_name,\n            name: name,\n            end: prev(),\n        })\n    }\n\n    function map_nameAsterisk(is_import, name) {\n        var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n        var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n        var start = S.token;\n        var foreign_name;\n        var end = prev();\n\n        name = name || new type({\n            name: \'*\',\n            start: start,\n            end: end,\n        });\n\n        foreign_name = new foreign_type({\n            name: \'*\',\n            start: start,\n            end: end,\n        });\n\n        return new AST_NameMapping({\n            start: start,\n            foreign_name: foreign_name,\n            name: name,\n            end: end,\n        })\n    }\n\n    function map_names(is_import) {\n        var names;\n        if (is("punc", "{")) {\n            next();\n            names = [];\n            while (!is("punc", "}")) {\n                names.push(map_name(is_import));\n                if (is("punc", ",")) {\n                    next();\n                }\n            }\n            next();\n        } else if (is("operator", "*")) {\n            var name;\n            next();\n            if (is_import && is("name", "as")) {\n                next();  // The "as" word\n                name = as_symbol(AST_SymbolImportForeign);\n            }\n            names = [map_nameAsterisk(is_import, name)];\n        }\n        return names;\n    }\n\n    function export_() {\n        var start = S.token;\n        var is_default;\n        var exported_names;\n\n        if (is("keyword", "default")) {\n            is_default = true;\n            next();\n        } else if (exported_names = map_names(false)) {\n            if (is("name", "from")) {\n                next();\n\n                var mod_str = S.token;\n                if (mod_str.type !== \'string\') {\n                    unexpected();\n                }\n                next();\n\n                return new AST_Export({\n                    start: start,\n                    is_default: is_default,\n                    exported_names: exported_names,\n                    module_name: new AST_String({\n                        start: mod_str,\n                        value: mod_str.value,\n                        quote: mod_str.quote,\n                        end: mod_str,\n                    }),\n                    end: prev(),\n                });\n            } else {\n                return new AST_Export({\n                    start: start,\n                    is_default: is_default,\n                    exported_names: exported_names,\n                    end: prev(),\n                });\n            }\n        }\n\n        var node;\n        var exported_value;\n        var exported_definition;\n        if (is("punc", "{")\n            || is_default\n                && (is("keyword", "class") || is("keyword", "function"))\n                && is_token(peek(), "punc")) {\n            exported_value = expression(false);\n            semicolon();\n        } else if ((node = statement(is_default)) instanceof AST_Definitions && is_default) {\n            unexpected(node.start);\n        } else if (node instanceof AST_Definitions || node instanceof AST_Lambda || node instanceof AST_DefClass) {\n            exported_definition = node;\n        } else if (node instanceof AST_SimpleStatement) {\n            exported_value = node.body;\n        } else {\n            unexpected(node.start);\n        }\n\n        return new AST_Export({\n            start: start,\n            is_default: is_default,\n            exported_value: exported_value,\n            exported_definition: exported_definition,\n            end: prev(),\n        });\n    }\n\n    function as_property_name() {\n        var tmp = S.token;\n        switch (tmp.type) {\n          case "punc":\n            if (tmp.value === "[") {\n                next();\n                var ex = expression(false);\n                expect("]");\n                return ex;\n            } else unexpected(tmp);\n          case "operator":\n            if (tmp.value === "*") {\n                next();\n                return null;\n            }\n            if (["delete", "in", "instanceof", "new", "typeof", "void"].indexOf(tmp.value) === -1) {\n                unexpected(tmp);\n            }\n          case "name":\n            if (tmp.value == "yield") {\n                if (is_in_generator()) {\n                    token_error(tmp, "Yield cannot be used as identifier inside generators");\n                } else if (!is_token(peek(), "punc", ":")\n                    && !is_token(peek(), "punc", "(")\n                    && S.input.has_directive("use strict")) {\n                    token_error(tmp, "Unexpected yield identifier inside strict mode");\n                }\n            }\n          case "string":\n          case "num":\n          case "keyword":\n          case "atom":\n            next();\n            return tmp.value;\n          default:\n            unexpected(tmp);\n        }\n    };\n\n    function as_name() {\n        var tmp = S.token;\n        if (tmp.type != "name") unexpected();\n        next();\n        return tmp.value;\n    };\n\n    function _make_symbol(type) {\n        var name = S.token.value;\n        return new (name == "this" ? AST_This :\n                    name == "super" ? AST_Super :\n                    type)({\n            name  : String(name),\n            start : S.token,\n            end   : S.token\n        });\n    };\n\n    function _verify_symbol(sym) {\n        var name = sym.name;\n        if (is_in_generator() && name == "yield") {\n            token_error(sym.start, "Yield cannot be used as identifier inside generators");\n        }\n        if (S.input.has_directive("use strict")) {\n            if (name == "yield") {\n                token_error(sym.start, "Unexpected yield identifier inside strict mode");\n            }\n            if (sym instanceof AST_SymbolDeclaration && (name == "arguments" || name == "eval")) {\n                token_error(sym.start, "Unexpected " + name + " in strict mode");\n            }\n        }\n    }\n\n    function as_symbol(type, noerror) {\n        if (!is("name")) {\n            if (!noerror) croak("Name expected");\n            return null;\n        }\n        var sym = _make_symbol(type);\n        _verify_symbol(sym);\n        next();\n        return sym;\n    };\n\n    function mark_pure(call) {\n        var start = call.start;\n        var comments = start.comments_before;\n        var i = HOP(start, "comments_before_length") ? start.comments_before_length : comments.length;\n        while (--i >= 0) {\n            var comment = comments[i];\n            if (/[@#]__PURE__/.test(comment.value)) {\n                call.pure = comment;\n                break;\n            }\n        }\n    }\n\n    var subscripts = function(expr, allow_calls) {\n        var start = expr.start;\n        if (is("punc", ".")) {\n            next();\n            return subscripts(new AST_Dot({\n                start      : start,\n                expression : expr,\n                property   : as_name(),\n                end        : prev()\n            }), allow_calls);\n        }\n        if (is("punc", "[")) {\n            next();\n            var prop = expression(true);\n            expect("]");\n            return subscripts(new AST_Sub({\n                start      : start,\n                expression : expr,\n                property   : prop,\n                end        : prev()\n            }), allow_calls);\n        }\n        if (allow_calls && is("punc", "(")) {\n            next();\n            var call = new AST_Call({\n                start      : start,\n                expression : expr,\n                args       : call_args(),\n                end        : prev()\n            });\n            mark_pure(call);\n            return subscripts(call, true);\n        }\n        if (is("template_head")) {\n            return subscripts(new AST_PrefixedTemplateString({\n                start: start,\n                prefix: expr,\n                template_string: template_string()\n            }), allow_calls);\n        }\n        return expr;\n    };\n\n    var call_args = embed_tokens(function _call_args() {\n        var args = [];\n        while (!is("punc", ")")) {\n            if (is("expand", "...")) {\n                next();\n                args.push(new AST_Expansion({\n                    start: prev(),\n                    expression: expression(false)\n                }));\n            } else {\n                args.push(expression(false));\n            }\n            if (!is("punc", ")")) {\n                expect(",");\n                if (is("punc", ")") && options.ecma < 8) unexpected();\n            }\n        }\n        next();\n        return args;\n    });\n\n    var maybe_unary = function(allow_calls, allow_arrows) {\n        var start = S.token;\n        if (start.type == "name" && start.value == "await") {\n            if (is_in_async()) {\n                next();\n                return _await_expression();\n            } else if (S.input.has_directive("use strict")) {\n                token_error(S.token, "Unexpected await identifier inside strict mode")\n            }\n        }\n        if (is("operator") && UNARY_PREFIX(start.value)) {\n            next();\n            handle_regexp();\n            var ex = make_unary(AST_UnaryPrefix, start, maybe_unary(allow_calls));\n            ex.start = start;\n            ex.end = prev();\n            return ex;\n        }\n        var val = expr_atom(allow_calls, allow_arrows);\n        while (is("operator") && UNARY_POSTFIX(S.token.value) && !has_newline_before(S.token)) {\n            if (val instanceof AST_Arrow) unexpected();\n            val = make_unary(AST_UnaryPostfix, S.token, val);\n            val.start = start;\n            val.end = S.token;\n            next();\n        }\n        return val;\n    };\n\n    function make_unary(ctor, token, expr) {\n        var op = token.value;\n        switch (op) {\n          case "++":\n          case "--":\n            if (!is_assignable(expr))\n                croak("Invalid use of " + op + " operator", token.line, token.col, token.pos);\n            break;\n          case "delete":\n            if (expr instanceof AST_SymbolRef && S.input.has_directive("use strict"))\n                croak("Calling delete on expression not allowed in strict mode", expr.start.line, expr.start.col, expr.start.pos);\n            break;\n        }\n        return new ctor({ operator: op, expression: expr });\n    };\n\n    var expr_op = function(left, min_prec, no_in) {\n        var op = is("operator") ? S.token.value : null;\n        if (op == "in" && no_in) op = null;\n        if (op == "**" && left instanceof AST_UnaryPrefix\n            /* unary token in front not allowed - parenthesis required */\n            && !is_token(left.start, "punc", "(")\n            && left.operator !== "--" && left.operator !== "++")\n                unexpected(left.start);\n        var prec = op != null ? PRECEDENCE[op] : null;\n        if (prec != null && (prec > min_prec || (op === "**" && min_prec === prec))) {\n            next();\n            var right = expr_op(maybe_unary(true), prec, no_in);\n            return expr_op(new AST_Binary({\n                start    : left.start,\n                left     : left,\n                operator : op,\n                right    : right,\n                end      : right.end\n            }), min_prec, no_in);\n        }\n        return left;\n    };\n\n    function expr_ops(no_in) {\n        return expr_op(maybe_unary(true, true), 0, no_in);\n    };\n\n    var maybe_conditional = function(no_in) {\n        var start = S.token;\n        var expr = expr_ops(no_in);\n        if (is("operator", "?")) {\n            next();\n            var yes = expression(false);\n            expect(":");\n            return new AST_Conditional({\n                start       : start,\n                condition   : expr,\n                consequent  : yes,\n                alternative : expression(false, no_in),\n                end         : prev()\n            });\n        }\n        return expr;\n    };\n\n    function is_assignable(expr) {\n        return expr instanceof AST_PropAccess || expr instanceof AST_SymbolRef;\n    };\n\n    function to_destructuring(node) {\n        if (node instanceof AST_Object) {\n            node = new AST_Destructuring({\n                start: node.start,\n                names: node.properties.map(to_destructuring),\n                is_array: false,\n                end: node.end\n            });\n        } else if (node instanceof AST_Array) {\n            var names = [];\n\n            for (var i = 0; i < node.elements.length; i++) {\n                // Only allow expansion as last element\n                if (node.elements[i] instanceof AST_Expansion) {\n                    if (i + 1 !== node.elements.length) {\n                        token_error(node.elements[i].start, "Spread must the be last element in destructuring array");\n                    }\n                    node.elements[i].expression = to_destructuring(node.elements[i].expression);\n                }\n\n                names.push(to_destructuring(node.elements[i]));\n            }\n\n            node = new AST_Destructuring({\n                start: node.start,\n                names: names,\n                is_array: true,\n                end: node.end\n            });\n        } else if (node instanceof AST_ObjectProperty) {\n            node.value = to_destructuring(node.value);\n        } else if (node instanceof AST_Assign) {\n            node = new AST_DefaultAssign({\n                start: node.start,\n                left: node.left,\n                operator: "=",\n                right: node.right,\n                end: node.end\n            });\n        }\n        return node;\n    }\n\n    // In ES6, AssignmentExpression can also be an ArrowFunction\n    var maybe_assign = function(no_in) {\n        var start = S.token;\n\n        if (start.type == "name" && start.value == "yield") {\n            if (is_in_generator()) {\n                next();\n                return _yield_expression();\n            } else if (S.input.has_directive("use strict")) {\n                token_error(S.token, "Unexpected yield identifier inside strict mode");\n            }\n        }\n\n        var left = maybe_conditional(no_in);\n        var val = S.token.value;\n\n        if (is("operator") && ASSIGNMENT(val)) {\n            if (is_assignable(left) || (left = to_destructuring(left)) instanceof AST_Destructuring) {\n                next();\n                return new AST_Assign({\n                    start    : start,\n                    left     : left,\n                    operator : val,\n                    right    : maybe_assign(no_in),\n                    end      : prev()\n                });\n            }\n            croak("Invalid assignment");\n        }\n        return left;\n    };\n\n    var expression = function(commas, no_in) {\n        var start = S.token;\n        var exprs = [];\n        while (true) {\n            exprs.push(maybe_assign(no_in));\n            if (!commas || !is("punc", ",")) break;\n            next();\n            commas = true;\n        }\n        return exprs.length == 1 ? exprs[0] : new AST_Sequence({\n            start       : start,\n            expressions : exprs,\n            end         : peek()\n        });\n    };\n\n    function in_loop(cont) {\n        ++S.in_loop;\n        var ret = cont();\n        --S.in_loop;\n        return ret;\n    };\n\n    if (options.expression) {\n        return expression(true);\n    }\n\n    return (function(){\n        var start = S.token;\n        var body = [];\n        S.input.push_directives_stack();\n        while (!is("eof"))\n            body.push(statement());\n        S.input.pop_directives_stack();\n        var end = prev();\n        var toplevel = options.toplevel;\n        if (toplevel) {\n            toplevel.body = toplevel.body.concat(body);\n            toplevel.end = end;\n        } else {\n            toplevel = new AST_Toplevel({ start: start, body: body, end: end });\n        }\n        return toplevel;\n    })();\n\n};\n'}}]);